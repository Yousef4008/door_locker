
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002546  000025da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800076  00800076  000025f0  2**0
                  ALLOC
  3 .stab         00002c1c  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001898  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000899d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a638  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <main>
      8a:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 12 	jmp	0x250c	; 0x250c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 12 	jmp	0x250c	; 0x250c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
    1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
    2. Enable the UART.
    3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* -> U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 -> RXEN  = 1 Receiver Enable
	 -> RXEN  = 1 Transmitter Enable
	 -> UCSZ2 = 0 For 5-bit/6-bit/7-bit/8-bit data mode
	 -> RXB8 & TXB8 used for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 -> UPM1:0  = parity bit mode
	 -> USBS    = stop bit mode
	 -> UCSZ1:0 = number of data bits (Character Size)
	 -> UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity) | (Config_Ptr->bit_data) | (Config_Ptr->stop_bit);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	80 81       	ld	r24, Z
     b7a:	98 2b       	or	r25, r24
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	89 2b       	or	r24, r25
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	8c 93       	st	X, r24
	
	/* -> Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	94 81       	ldd	r25, Z+4	; 0x04
     b90:	a5 81       	ldd	r26, Z+5	; 0x05
     b92:	b6 81       	ldd	r27, Z+6	; 0x06
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	aa 1f       	adc	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	aa 1f       	adc	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	aa 1f       	adc	r26, r26
     baa:	bb 1f       	adc	r27, r27
     bac:	9c 01       	movw	r18, r24
     bae:	ad 01       	movw	r20, r26
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	92 e1       	ldi	r25, 0x12	; 18
     bb4:	aa e7       	ldi	r26, 0x7A	; 122
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	bc 01       	movw	r22, r24
     bba:	cd 01       	movw	r24, r26
     bbc:	0e 94 48 12 	call	0x2490	; 0x2490 <__udivmodsi4>
     bc0:	da 01       	movw	r26, r20
     bc2:	c9 01       	movw	r24, r18
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01

	/* -> First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	89 2f       	mov	r24, r25
     bd4:	99 27       	eor	r25, r25
     bd6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bd8:	e9 e2       	ldi	r30, 0x29	; 41
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 83       	st	Z, r24
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <UART_sendByte>:
/*
 * Description :
 -> Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 -> UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	    transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bfa:	eb e2       	ldi	r30, 0x2B	; 43
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	80 72       	andi	r24, 0x20	; 32
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	b9 f3       	breq	.-18     	; 0xbfa <UART_sendByte+0xc>

	/*
	 -> Put the required data in the UDR register and it also clear the UDRE flag as
	    the UDR register is not empty now
	 */
	UDR = data;
     c0c:	ec e2       	ldi	r30, 0x2C	; 44
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	80 83       	st	Z, r24

}
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <UART_recieveByte>:
/*
 * Description :
 -> Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	dc f7       	brge	.-10     	; 0xc24 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c2e:	ec e2       	ldi	r30, 0x2C	; 44
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <UART_sendString>:
/*
 * Description :
 -> Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <UART_sendString+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	80 81       	ld	r24, Z
     c60:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
		i++;
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	fc 01       	movw	r30, r24
     c76:	e2 0f       	add	r30, r18
     c78:	f3 1f       	adc	r31, r19
     c7a:	80 81       	ld	r24, Z
     c7c:	88 23       	and	r24, r24
     c7e:	39 f7       	brne	.-50     	; 0xc4e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_receiveString+0xa>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	8c 01       	movw	r16, r24
     cae:	02 0f       	add	r16, r18
     cb0:	13 1f       	adc	r17, r19
     cb2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
     cba:	0f c0       	rjmp	.+30     	; 0xcda <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	8c 01       	movw	r16, r24
     cce:	02 0f       	add	r16, r18
     cd0:	13 1f       	adc	r17, r19
     cd2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	fc 01       	movw	r30, r24
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	80 81       	ld	r24, Z
     cec:	83 32       	cpi	r24, 0x23	; 35
     cee:	31 f7       	brne	.-52     	; 0xcbc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	10 82       	st	Z, r1
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <__vector_9>:
/*______________________________________________________________________________
 |                           Interrupt Service Routine                          |
 |______________________________________________________________________________|
 */

ISR (TIMER1_OVF_vect){
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     d3c:	80 91 76 00 	lds	r24, 0x0076
     d40:	90 91 77 00 	lds	r25, 0x0077
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	29 f0       	breq	.+10     	; 0xd52 <__vector_9+0x40>
		(*target_routine)();
     d48:	e0 91 76 00 	lds	r30, 0x0076
     d4c:	f0 91 77 00 	lds	r31, 0x0077
     d50:	09 95       	icall
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_7>:

ISR (TIMER1_COMPA_vect){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     da2:	80 91 76 00 	lds	r24, 0x0076
     da6:	90 91 77 00 	lds	r25, 0x0077
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	29 f0       	breq	.+10     	; 0xdb8 <__vector_7+0x40>
		(*target_routine)();
     dae:	e0 91 76 00 	lds	r30, 0x0076
     db2:	f0 91 77 00 	lds	r31, 0x0077
     db6:	09 95       	icall
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <Timer1_init>:
 -> Functional responsible for Initialize Timer1 by:
    1. Setting the initial value of the counter
    2. Setup the mode (Normal / Compare)
    3. Setup the prescaler
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <Timer1_init+0x6>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
     dec:	ac e4       	ldi	r26, 0x4C	; 76
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	9c 93       	st	X, r25
     dfc:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == NORMAL_MODE){
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	85 81       	ldd	r24, Z+5	; 0x05
     e04:	88 23       	and	r24, r24
     e06:	91 f4       	brne	.+36     	; 0xe2c <Timer1_init+0x4e>

		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
     e08:	a9 e5       	ldi	r26, 0x59	; 89
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e9 e5       	ldi	r30, 0x59	; 89
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 1)
		 */

		TCCR1A = (1<<FOC1A);
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 1)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler;
     e1e:	ae e4       	ldi	r26, 0x4E	; 78
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	8c 93       	st	X, r24
     e2a:	1e c0       	rjmp	.+60     	; 0xe68 <Timer1_init+0x8a>

	}
	else {

		OCR1A = Config_Ptr->compare_value;
     e2c:	aa e4       	ldi	r26, 0x4A	; 74
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e9 81       	ldd	r30, Y+1	; 0x01
     e32:	fa 81       	ldd	r31, Y+2	; 0x02
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     e3e:	a9 e5       	ldi	r26, 0x59	; 89
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 e5       	ldi	r30, 0x59	; 89
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
     e4c:	ef e4       	ldi	r30, 0x4F	; 79
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	88 e0       	ldi	r24, 0x08	; 8
     e52:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
     e54:	ae e4       	ldi	r26, 0x4E	; 78
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	94 81       	ldd	r25, Z+4	; 0x04
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	85 81       	ldd	r24, Z+5	; 0x05
     e64:	89 2b       	or	r24, r25
     e66:	8c 93       	st	X, r24
	}
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <Timer1_deInit>:

/*
 * Description :
 -> Functional responsible for uninitialize timer1
 */
void Timer1_deInit(void){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     e7a:	ec e4       	ldi	r30, 0x4C	; 76
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	10 82       	st	Z, r1
	TCCR1B = 0;
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <Timer1_setCallBack>:

/*
 * Description :
 -> Functional responsible for setting the call back function
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <Timer1_setCallBack+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	target_routine = a_ptr;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	90 93 77 00 	sts	0x0077, r25
     ea4:	80 93 76 00 	sts	0x0076, r24
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <Timer0_PWM_Init>:
/*
 * Description :
 -> Function responsible for initialize Timer0 on PWM mode
 */
void Timer0_PWM_Init(uint8 channel, unsigned char set_duty_cycle)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <Timer0_PWM_Init+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <Timer0_PWM_Init+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	6a 83       	std	Y+2, r22	; 0x02
	set_duty_cycle =((uint16)(255*set_duty_cycle)) / 100;
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	48 2f       	mov	r20, r24
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	ca 01       	movw	r24, r20
     eca:	9c 01       	movw	r18, r24
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	c9 01       	movw	r24, r18
     ed2:	96 95       	lsr	r25
     ed4:	98 2f       	mov	r25, r24
     ed6:	88 27       	eor	r24, r24
     ed8:	97 95       	ror	r25
     eda:	87 95       	ror	r24
     edc:	82 1b       	sub	r24, r18
     ede:	93 0b       	sbc	r25, r19
     ee0:	84 0f       	add	r24, r20
     ee2:	95 1f       	adc	r25, r21
     ee4:	24 e6       	ldi	r18, 0x64	; 100
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	b9 01       	movw	r22, r18
     eea:	0e 94 34 12 	call	0x2468	; 0x2468 <__udivmodhi4>
     eee:	cb 01       	movw	r24, r22
     ef0:	8a 83       	std	Y+2, r24	; 0x02

	switch(channel){
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3c 83       	std	Y+4, r19	; 0x04
     efa:	2b 83       	std	Y+3, r18	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	31 f0       	breq	.+12     	; 0xf12 <Timer0_PWM_Init+0x60>
     f06:	2b 81       	ldd	r18, Y+3	; 0x03
     f08:	3c 81       	ldd	r19, Y+4	; 0x04
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	91 f0       	breq	.+36     	; 0xf34 <Timer0_PWM_Init+0x82>
     f10:	21 c0       	rjmp	.+66     	; 0xf54 <Timer0_PWM_Init+0xa2>
	case 1:
		TCNT0 = 0;  // Set Timer0 Initial Value to 0
     f12:	e2 e5       	ldi	r30, 0x52	; 82
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	10 82       	st	Z, r1
		OCR0  = set_duty_cycle; //Set Compare value
     f18:	ec e5       	ldi	r30, 0x5C	; 92
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	80 83       	st	Z, r24
		GPIO_setupPinDirection(PORTB_ID , PIN3_ID , PIN_OUTPUT);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8a e6       	ldi	r24, 0x6A	; 106
     f30:	80 83       	st	Z, r24
     f32:	10 c0       	rjmp	.+32     	; 0xf54 <Timer0_PWM_Init+0xa2>
		break;
	case 2:
		TCNT2 = 0;	// Set Timer2 Initial Value to 0
     f34:	e4 e4       	ldi	r30, 0x44	; 68
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1
		OCR2  = set_duty_cycle; //Set Compare value
     f3a:	e3 e4       	ldi	r30, 0x43	; 67
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	80 83       	st	Z, r24
		GPIO_setupPinDirection(PORTD_ID , PIN7_ID , PIN_OUTPUT);
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	67 e0       	ldi	r22, 0x07	; 7
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS21);
     f4c:	e5 e4       	ldi	r30, 0x45	; 69
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	8a e6       	ldi	r24, 0x6A	; 106
     f52:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <I2C_init>:
/*
 * Description :
 -> Initiate the I2C with its configurable baud rate and slave address
 */
void I2C_init(const I2C_ConfigType * Config_Ptr)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <I2C_init+0x6>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: using zero pre-scaler TWPS=00 and F_CPU=8Mhz and configurable TWBR*/

    TWBR = Config_Ptr->bit_rate;
     f70:	a0 e2       	ldi	r26, 0x20	; 32
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	8c 93       	st	X, r24
	TWSR = 0x00;
     f7c:	e1 e2       	ldi	r30, 0x21	; 33
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	
    TWAR = ((Config_Ptr->address)<<1);
     f82:	a2 e2       	ldi	r26, 0x22	; 34
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e9 81       	ldd	r30, Y+1	; 0x01
     f88:	fa 81       	ldd	r31, Y+2	; 0x02
     f8a:	80 81       	ld	r24, Z
     f8c:	88 0f       	add	r24, r24
     f8e:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable I2C */
     f90:	e6 e5       	ldi	r30, 0x56	; 86
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	80 83       	st	Z, r24
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <I2C_start>:
/*
 * Description :
 -> Function to send the start bit
 */
void I2C_start(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     faa:	e6 e5       	ldi	r30, 0x56	; 86
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	84 ea       	ldi	r24, 0xA4	; 164
     fb0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fb2:	e6 e5       	ldi	r30, 0x56	; 86
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 23       	and	r24, r24
     fba:	dc f7       	brge	.-10     	; 0xfb2 <I2C_start+0x10>
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <I2C_stop>:
/*
 * Description :
 -> Function to send the stop bit
 */
void I2C_stop(void)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     fca:	e6 e5       	ldi	r30, 0x56	; 86
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	84 e9       	ldi	r24, 0x94	; 148
     fd0:	80 83       	st	Z, r24
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <I2C_writeByte>:
/*
 * Description :
 -> Function to send a single byte over I2C
 */
void I2C_writeByte(uint8 data)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     fe4:	e3 e2       	ldi	r30, 0x23	; 35
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     fec:	e6 e5       	ldi	r30, 0x56	; 86
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	84 e8       	ldi	r24, 0x84	; 132
     ff2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ff4:	e6 e5       	ldi	r30, 0x56	; 86
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 23       	and	r24, r24
     ffc:	dc f7       	brge	.-10     	; 0xff4 <I2C_writeByte+0x1c>
}
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <I2C_readByteWithACK>:
/*
 * Description :
 -> Function to read a single byte with acknowledgment
 */
uint8 I2C_readByteWithACK(void)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	84 ec       	ldi	r24, 0xC4	; 196
    1014:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1016:	e6 e5       	ldi	r30, 0x56	; 86
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 23       	and	r24, r24
    101e:	dc f7       	brge	.-10     	; 0x1016 <I2C_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1020:	e3 e2       	ldi	r30, 0x23	; 35
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <I2C_readByteWithNACK>:
/*
 * Description :
 -> Function to read a single byte without acknowledgment
 */
uint8 I2C_readByteWithNACK(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1034:	e6 e5       	ldi	r30, 0x56	; 86
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	84 e8       	ldi	r24, 0x84	; 132
    103a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    103c:	e6 e5       	ldi	r30, 0x56	; 86
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 23       	and	r24, r24
    1044:	dc f7       	brge	.-10     	; 0x103c <I2C_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1046:	e3 e2       	ldi	r30, 0x23	; 35
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <I2C_getStatus>:
/*
 * Description :
 -> Function to get the status of the communication
 */
uint8 I2C_getStatus(void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    105c:	e1 e2       	ldi	r30, 0x21	; 33
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <GPIO_setupPinDirection>:
 * Description :
 -> Setup the direction of the required pin input/output.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <GPIO_setupPinDirection+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_setupPinDirection+0x8>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	6a 83       	std	Y+2, r22	; 0x02
    1082:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	08 f0       	brcs	.+2      	; 0x108c <GPIO_setupPinDirection+0x1c>
    108a:	d5 c0       	rjmp	.+426    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	08 f0       	brcs	.+2      	; 0x1094 <GPIO_setupPinDirection+0x24>
    1092:	d1 c0       	rjmp	.+418    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <GPIO_setupPinDirection+0x3a>
    10a8:	43 c0       	rjmp	.+134    	; 0x1130 <GPIO_setupPinDirection+0xc0>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <GPIO_setupPinDirection+0x4e>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <GPIO_setupPinDirection+0x68>
    10bc:	bc c0       	rjmp	.+376    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_setupPinDirection+0x5a>
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <GPIO_setupPinDirection+0x118>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <GPIO_setupPinDirection+0x66>
    10d4:	85 c0       	rjmp	.+266    	; 0x11e0 <GPIO_setupPinDirection+0x170>
    10d6:	af c0       	rjmp	.+350    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10de:	aa e3       	ldi	r26, 0x3A	; 58
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ea e3       	ldi	r30, 0x3A	; 58
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_setupPinDirection+0x8c>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_setupPinDirection+0x88>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	98 c0       	rjmp	.+304    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_setupPinDirection+0xb4>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_setupPinDirection+0xb0>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	83 c0       	rjmp	.+262    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	a1 f4       	brne	.+40     	; 0x115e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1136:	a7 e3       	ldi	r26, 0x37	; 55
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_setupPinDirection+0xe4>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_setupPinDirection+0xe0>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	6c c0       	rjmp	.+216    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0x10c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0x108>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	57 c0       	rjmp	.+174    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    118e:	a4 e3       	ldi	r26, 0x34	; 52
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_setupPinDirection+0x13c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_setupPinDirection+0x138>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	40 c0       	rjmp	.+128    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11b6:	a4 e3       	ldi	r26, 0x34	; 52
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e4 e3       	ldi	r30, 0x34	; 52
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_setupPinDirection+0x164>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_setupPinDirection+0x160>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	2b c0       	rjmp	.+86     	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	a1 f4       	brne	.+40     	; 0x120e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_setupPinDirection+0x194>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_setupPinDirection+0x190>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_setupPinDirection+0x1bc>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_setupPinDirection+0x1b8>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <GPIO_writePin>:
 -> Write the value Logic High or Logic Low on the required pin.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 -> If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_writePin+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_writePin+0x8>
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
    1258:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <GPIO_writePin+0x1c>
    1260:	d5 c0       	rjmp	.+426    	; 0x140c <GPIO_writePin+0x1c6>
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	08 f0       	brcs	.+2      	; 0x126a <GPIO_writePin+0x24>
    1268:	d1 c0       	rjmp	.+418    	; 0x140c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3d 83       	std	Y+5, r19	; 0x05
    1272:	2c 83       	std	Y+4, r18	; 0x04
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <GPIO_writePin+0x3a>
    127e:	43 c0       	rjmp	.+134    	; 0x1306 <GPIO_writePin+0xc0>
    1280:	2c 81       	ldd	r18, Y+4	; 0x04
    1282:	3d 81       	ldd	r19, Y+5	; 0x05
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <GPIO_writePin+0x4e>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	71 f0       	breq	.+28     	; 0x12ae <GPIO_writePin+0x68>
    1292:	bc c0       	rjmp	.+376    	; 0x140c <GPIO_writePin+0x1c6>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <GPIO_writePin+0x5a>
    129e:	5f c0       	rjmp	.+190    	; 0x135e <GPIO_writePin+0x118>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <GPIO_writePin+0x66>
    12aa:	85 c0       	rjmp	.+266    	; 0x13b6 <GPIO_writePin+0x170>
    12ac:	af c0       	rjmp	.+350    	; 0x140c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12b4:	ab e3       	ldi	r26, 0x3B	; 59
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e3       	ldi	r30, 0x3B	; 59
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_writePin+0x8c>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_writePin+0x88>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	98 c0       	rjmp	.+304    	; 0x140c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_writePin+0xb4>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_writePin+0xb0>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	83 c0       	rjmp	.+262    	; 0x140c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a1 f4       	brne	.+40     	; 0x1334 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_writePin+0xe4>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_writePin+0xe0>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	6c c0       	rjmp	.+216    	; 0x140c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1334:	a8 e3       	ldi	r26, 0x38	; 56
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_writePin+0x10c>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_writePin+0x108>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	57 c0       	rjmp	.+174    	; 0x140c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	a1 f4       	brne	.+40     	; 0x138c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1364:	a5 e3       	ldi	r26, 0x35	; 53
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e5 e3       	ldi	r30, 0x35	; 53
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <GPIO_writePin+0x13c>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <GPIO_writePin+0x138>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	40 c0       	rjmp	.+128    	; 0x140c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_writePin+0x164>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_writePin+0x160>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	2b c0       	rjmp	.+86     	; 0x140c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	a1 f4       	brne	.+40     	; 0x13e4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13bc:	a2 e3       	ldi	r26, 0x32	; 50
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e2 e3       	ldi	r30, 0x32	; 50
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_writePin+0x194>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_writePin+0x190>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_writePin+0x1bc>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_writePin+0x1b8>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <GPIO_readPin>:
 * Description :
 -> Read and return the value for the required pin, it should be Logic High or Logic Low.
 -> If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_readPin+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_readPin+0x8>
    1424:	0f 92       	push	r0
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    142e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	08 f0       	brcs	.+2      	; 0x1438 <GPIO_readPin+0x1c>
    1436:	84 c0       	rjmp	.+264    	; 0x1540 <GPIO_readPin+0x124>
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	08 f0       	brcs	.+2      	; 0x1440 <GPIO_readPin+0x24>
    143e:	80 c0       	rjmp	.+256    	; 0x1540 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	4c 81       	ldd	r20, Y+4	; 0x04
    144c:	5d 81       	ldd	r21, Y+5	; 0x05
    144e:	41 30       	cpi	r20, 0x01	; 1
    1450:	51 05       	cpc	r21, r1
    1452:	79 f1       	breq	.+94     	; 0x14b2 <GPIO_readPin+0x96>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	82 30       	cpi	r24, 0x02	; 2
    145a:	91 05       	cpc	r25, r1
    145c:	34 f4       	brge	.+12     	; 0x146a <GPIO_readPin+0x4e>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	69 f0       	breq	.+26     	; 0x1482 <GPIO_readPin+0x66>
    1468:	6b c0       	rjmp	.+214    	; 0x1540 <GPIO_readPin+0x124>
    146a:	4c 81       	ldd	r20, Y+4	; 0x04
    146c:	5d 81       	ldd	r21, Y+5	; 0x05
    146e:	42 30       	cpi	r20, 0x02	; 2
    1470:	51 05       	cpc	r21, r1
    1472:	b9 f1       	breq	.+110    	; 0x14e2 <GPIO_readPin+0xc6>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <GPIO_readPin+0x64>
    147e:	49 c0       	rjmp	.+146    	; 0x1512 <GPIO_readPin+0xf6>
    1480:	5f c0       	rjmp	.+190    	; 0x1540 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_readPin+0x7e>
    1496:	55 95       	asr	r21
    1498:	47 95       	ror	r20
    149a:	8a 95       	dec	r24
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_readPin+0x7a>
    149e:	ca 01       	movw	r24, r20
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	88 23       	and	r24, r24
    14a6:	19 f0       	breq	.+6      	; 0x14ae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	49 c0       	rjmp	.+146    	; 0x1540 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    14b0:	47 c0       	rjmp	.+142    	; 0x1540 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_readPin+0xae>
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_readPin+0xaa>
    14ce:	ca 01       	movw	r24, r20
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	90 70       	andi	r25, 0x00	; 0
    14d4:	88 23       	and	r24, r24
    14d6:	19 f0       	breq	.+6      	; 0x14de <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	31 c0       	rjmp	.+98     	; 0x1540 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14e2:	e3 e3       	ldi	r30, 0x33	; 51
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_readPin+0xde>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_readPin+0xda>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	19 c0       	rjmp	.+50     	; 0x1540 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	17 c0       	rjmp	.+46     	; 0x1540 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1512:	e0 e3       	ldi	r30, 0x30	; 48
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_readPin+0x10e>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_readPin+0x10a>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    153e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <GPIO_setupPortDirection>:
 -> If the direction value is PORT_INPUT all pins in this port should be input pins.
 -> If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <GPIO_setupPortDirection+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <GPIO_setupPortDirection+0x8>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	90 f5       	brcc	.+100    	; 0x15cc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3c 83       	std	Y+4, r19	; 0x04
    1570:	2b 83       	std	Y+3, r18	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	d1 f0       	breq	.+52     	; 0x15b0 <GPIO_setupPortDirection+0x5e>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <GPIO_setupPortDirection+0x3e>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <GPIO_setupPortDirection+0x54>
    158e:	1e c0       	rjmp	.+60     	; 0x15cc <GPIO_setupPortDirection+0x7a>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	81 f0       	breq	.+32     	; 0x15ba <GPIO_setupPortDirection+0x68>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <GPIO_setupPortDirection+0x72>
    15a4:	13 c0       	rjmp	.+38     	; 0x15cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
    15ae:	0e c0       	rjmp	.+28     	; 0x15cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15b0:	e7 e3       	ldi	r30, 0x37	; 55
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15ba:	e4 e3       	ldi	r30, 0x34	; 52
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15c4:	e1 e3       	ldi	r30, 0x31	; 49
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <GPIO_writePort>:
 -> If any pin in the port is output pin the value will be written.
 -> If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <GPIO_writePort+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <GPIO_writePort+0x8>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	90 f5       	brcc	.+100    	; 0x1654 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3c 83       	std	Y+4, r19	; 0x04
    15f8:	2b 83       	std	Y+3, r18	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	d1 f0       	breq	.+52     	; 0x1638 <GPIO_writePort+0x5e>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	2c f4       	brge	.+10     	; 0x1618 <GPIO_writePort+0x3e>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 f0       	breq	.+24     	; 0x162e <GPIO_writePort+0x54>
    1616:	1e c0       	rjmp	.+60     	; 0x1654 <GPIO_writePort+0x7a>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	81 f0       	breq	.+32     	; 0x1642 <GPIO_writePort+0x68>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	91 05       	cpc	r25, r1
    162a:	81 f0       	breq	.+32     	; 0x164c <GPIO_writePort+0x72>
    162c:	13 c0       	rjmp	.+38     	; 0x1654 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    162e:	eb e3       	ldi	r30, 0x3B	; 59
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	0e c0       	rjmp	.+28     	; 0x1654 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    164c:	e2 e3       	ldi	r30, 0x32	; 50
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
			break;
		}
	}
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <GPIO_readPort>:
 * Description :
 -> Read and return the value of the required port.
 -> If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_readPort+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_readPort+0x8>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1670:	19 82       	std	Y+1, r1	; 0x01

	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	90 f5       	brcc	.+100    	; 0x16dc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3c 83       	std	Y+4, r19	; 0x04
    1680:	2b 83       	std	Y+3, r18	; 0x03
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	d1 f0       	breq	.+52     	; 0x16c0 <GPIO_readPort+0x5e>
    168c:	2b 81       	ldd	r18, Y+3	; 0x03
    168e:	3c 81       	ldd	r19, Y+4	; 0x04
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <GPIO_readPort+0x3e>
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	61 f0       	breq	.+24     	; 0x16b6 <GPIO_readPort+0x54>
    169e:	1e c0       	rjmp	.+60     	; 0x16dc <GPIO_readPort+0x7a>
    16a0:	2b 81       	ldd	r18, Y+3	; 0x03
    16a2:	3c 81       	ldd	r19, Y+4	; 0x04
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	81 f0       	breq	.+32     	; 0x16ca <GPIO_readPort+0x68>
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	81 f0       	breq	.+32     	; 0x16d4 <GPIO_readPort+0x72>
    16b4:	13 c0       	rjmp	.+38     	; 0x16dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16b6:	e9 e3       	ldi	r30, 0x39	; 57
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	0e c0       	rjmp	.+28     	; 0x16dc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16c0:	e6 e3       	ldi	r30, 0x36	; 54
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16ca:	e3 e3       	ldi	r30, 0x33	; 51
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16d4:	e0 e3       	ldi	r30, 0x30	; 48
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <L293D_Init>:
/*
 * Description :
 -> Function responsible for initialize the L293D driver.
 -> Function take a structure containing the configuration parameters.
 */
void L293D_Init(L293D_ChannelMode ChannelMode){
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <L293D_Init+0x6>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
	switch(ChannelMode){
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3b 83       	std	Y+3, r19	; 0x03
    1702:	2a 83       	std	Y+2, r18	; 0x02
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	91 05       	cpc	r25, r1
    170c:	01 f1       	breq	.+64     	; 0x174e <L293D_Init+0x62>
    170e:	2a 81       	ldd	r18, Y+2	; 0x02
    1710:	3b 81       	ldd	r19, Y+3	; 0x03
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	31 05       	cpc	r19, r1
    1716:	81 f1       	breq	.+96     	; 0x1778 <L293D_Init+0x8c>
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	9b 81       	ldd	r25, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	09 f0       	breq	.+2      	; 0x1724 <L293D_Init+0x38>
    1722:	52 c0       	rjmp	.+164    	; 0x17c8 <L293D_Init+0xdc>
	case CHANNEL1_MODE:
		GPIO_setupPinDirection(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , PIN_OUTPUT);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , PIN_OUTPUT);
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_writePin(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , LOGIC_LOW);
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , LOGIC_LOW);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    174c:	3d c0       	rjmp	.+122    	; 0x17c8 <L293D_Init+0xdc>
		break;
	case CHANNEL2_MODE:
		GPIO_setupPinDirection(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , PIN_OUTPUT);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , PIN_OUTPUT);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	64 e0       	ldi	r22, 0x04	; 4
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_writePin(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , LOGIC_LOW);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		GPIO_writePin(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , LOGIC_LOW);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1776:	28 c0       	rjmp	.+80     	; 0x17c8 <L293D_Init+0xdc>

		break;
	case DUAL_CHANNEL_MODE:
		GPIO_setupPinDirection(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , PIN_OUTPUT);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , PIN_OUTPUT);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , PIN_OUTPUT);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	63 e0       	ldi	r22, 0x03	; 3
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , PIN_OUTPUT);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	64 e0       	ldi	r22, 0x04	; 4
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>

		GPIO_writePin(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , LOGIC_LOW);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , LOGIC_LOW);
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		GPIO_writePin(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , LOGIC_LOW);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	63 e0       	ldi	r22, 0x03	; 3
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		GPIO_writePin(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , LOGIC_LOW);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	64 e0       	ldi	r22, 0x04	; 4
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
		break;
	}

}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <L293D_Rotate>:
/*
 * Description :
 -> Setup the rotation direction of the motor.
 -> The function take the channel and state (OFF , CW , A-CW) and the speed (0-100)
 */
void L293D_Rotate(uint8 Channel , DcMotor_State state,uint8 speed){
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	6a 83       	std	Y+2, r22	; 0x02
    17ec:	4b 83       	std	Y+3, r20	; 0x03

	/* Make a PWM of duty cycle based on the speed */
	Timer0_PWM_Init(Channel , speed);
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	6b 81       	ldd	r22, Y+3	; 0x03
    17f2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <Timer0_PWM_Init>

	/* Controling the direction based on the speed argument and the channel required */
	switch(Channel){
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	39 87       	std	Y+9, r19	; 0x09
    17fe:	28 87       	std	Y+8, r18	; 0x08
    1800:	88 85       	ldd	r24, Y+8	; 0x08
    1802:	99 85       	ldd	r25, Y+9	; 0x09
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	91 05       	cpc	r25, r1
    1808:	31 f0       	breq	.+12     	; 0x1816 <L293D_Rotate+0x42>
    180a:	28 85       	ldd	r18, Y+8	; 0x08
    180c:	39 85       	ldd	r19, Y+9	; 0x09
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	b1 f1       	breq	.+108    	; 0x1880 <L293D_Rotate+0xac>
    1814:	68 c0       	rjmp	.+208    	; 0x18e6 <L293D_Rotate+0x112>
	case CHANNEL1_MODE:
		switch(state){
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3f 83       	std	Y+7, r19	; 0x07
    181e:	2e 83       	std	Y+6, r18	; 0x06
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	a9 f0       	breq	.+42     	; 0x1854 <L293D_Rotate+0x80>
    182a:	2e 81       	ldd	r18, Y+6	; 0x06
    182c:	3f 81       	ldd	r19, Y+7	; 0x07
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	d9 f0       	breq	.+54     	; 0x186a <L293D_Rotate+0x96>
    1834:	8e 81       	ldd	r24, Y+6	; 0x06
    1836:	9f 81       	ldd	r25, Y+7	; 0x07
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	09 f0       	breq	.+2      	; 0x183e <L293D_Rotate+0x6a>
    183c:	54 c0       	rjmp	.+168    	; 0x18e6 <L293D_Rotate+0x112>
		case OFF:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1852:	49 c0       	rjmp	.+146    	; 0x18e6 <L293D_Rotate+0x112>
			break;
		case CW:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_HIGH);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1868:	3e c0       	rjmp	.+124    	; 0x18e6 <L293D_Rotate+0x112>
			break;
		case A_CW:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_HIGH);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    187e:	33 c0       	rjmp	.+102    	; 0x18e6 <L293D_Rotate+0x112>
			break;
		}
		break;
		case CHANNEL2_MODE:
			switch(state){
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3d 83       	std	Y+5, r19	; 0x05
    1888:	2c 83       	std	Y+4, r18	; 0x04
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	a1 f0       	breq	.+40     	; 0x18bc <L293D_Rotate+0xe8>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	d1 f0       	breq	.+52     	; 0x18d2 <L293D_Rotate+0xfe>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	01 f5       	brne	.+64     	; 0x18e6 <L293D_Rotate+0x112>
			case OFF:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	63 e0       	ldi	r22, 0x03	; 3
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    18ba:	15 c0       	rjmp	.+42     	; 0x18e6 <L293D_Rotate+0x112>
				break;
			case CW:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_HIGH);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	63 e0       	ldi	r22, 0x03	; 3
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    18d0:	0a c0       	rjmp	.+20     	; 0x18e6 <L293D_Rotate+0x112>
				break;
			case A_CW:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	63 e0       	ldi	r22, 0x03	; 3
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_HIGH);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	64 e0       	ldi	r22, 0x04	; 4
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
				break;
			}
			break;
	}
}
    18e6:	29 96       	adiw	r28, 0x09	; 9
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <EEPROM_writeByte>:
/*______________________________________________________________________________
 |                               Functions Definitions                          |
 |______________________________________________________________________________|
 */
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <EEPROM_writeByte+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <EEPROM_writeByte+0x8>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	I2C_start();
    190a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    190e:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	11 f0       	breq	.+4      	; 0x191a <EEPROM_writeByte+0x22>
        return ERROR;
    1916:	1c 82       	std	Y+4, r1	; 0x04
    1918:	28 c0       	rjmp	.+80     	; 0x196a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	80 70       	andi	r24, 0x00	; 0
    1920:	97 70       	andi	r25, 0x07	; 7
    1922:	88 0f       	add	r24, r24
    1924:	89 2f       	mov	r24, r25
    1926:	88 1f       	adc	r24, r24
    1928:	99 0b       	sbc	r25, r25
    192a:	91 95       	neg	r25
    192c:	80 6a       	ori	r24, 0xA0	; 160
    192e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    1932:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1936:	88 31       	cpi	r24, 0x18	; 24
    1938:	11 f0       	breq	.+4      	; 0x193e <EEPROM_writeByte+0x46>
        return ERROR; 
    193a:	1c 82       	std	Y+4, r1	; 0x04
    193c:	16 c0       	rjmp	.+44     	; 0x196a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1944:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1948:	88 32       	cpi	r24, 0x28	; 40
    194a:	11 f0       	breq	.+4      	; 0x1950 <EEPROM_writeByte+0x58>
        return ERROR;
    194c:	1c 82       	std	Y+4, r1	; 0x04
    194e:	0d c0       	rjmp	.+26     	; 0x196a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    I2C_writeByte(u8data);
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1956:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    195a:	88 32       	cpi	r24, 0x28	; 40
    195c:	11 f0       	breq	.+4      	; 0x1962 <EEPROM_writeByte+0x6a>
        return ERROR;
    195e:	1c 82       	std	Y+4, r1	; 0x04
    1960:	04 c0       	rjmp	.+8      	; 0x196a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    I2C_stop();
    1962:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <I2C_stop>
	
    return SUCCESS;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	8c 83       	std	Y+4, r24	; 0x04
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <EEPROM_readByte+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <EEPROM_readByte+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	7c 83       	std	Y+4, r23	; 0x04
    198e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	I2C_start();
    1990:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    1994:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	11 f0       	breq	.+4      	; 0x19a0 <EEPROM_readByte+0x26>
        return ERROR;
    199c:	1d 82       	std	Y+5, r1	; 0x05
    199e:	44 c0       	rjmp	.+136    	; 0x1a28 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	80 70       	andi	r24, 0x00	; 0
    19a6:	97 70       	andi	r25, 0x07	; 7
    19a8:	88 0f       	add	r24, r24
    19aa:	89 2f       	mov	r24, r25
    19ac:	88 1f       	adc	r24, r24
    19ae:	99 0b       	sbc	r25, r25
    19b0:	91 95       	neg	r25
    19b2:	80 6a       	ori	r24, 0xA0	; 160
    19b4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    19b8:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    19bc:	88 31       	cpi	r24, 0x18	; 24
    19be:	11 f0       	breq	.+4      	; 0x19c4 <EEPROM_readByte+0x4a>
        return ERROR;
    19c0:	1d 82       	std	Y+5, r1	; 0x05
    19c2:	32 c0       	rjmp	.+100    	; 0x1a28 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    19ca:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    19ce:	88 32       	cpi	r24, 0x28	; 40
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <EEPROM_readByte+0x5c>
        return ERROR;
    19d2:	1d 82       	std	Y+5, r1	; 0x05
    19d4:	29 c0       	rjmp	.+82     	; 0x1a28 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    I2C_start();
    19d6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <I2C_start>
    if (I2C_getStatus() != I2C_REP_START)
    19da:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    19de:	80 31       	cpi	r24, 0x10	; 16
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <EEPROM_readByte+0x6c>
        return ERROR;
    19e2:	1d 82       	std	Y+5, r1	; 0x05
    19e4:	21 c0       	rjmp	.+66     	; 0x1a28 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	80 70       	andi	r24, 0x00	; 0
    19ec:	97 70       	andi	r25, 0x07	; 7
    19ee:	88 0f       	add	r24, r24
    19f0:	89 2f       	mov	r24, r25
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 0b       	sbc	r25, r25
    19f6:	91 95       	neg	r25
    19f8:	81 6a       	ori	r24, 0xA1	; 161
    19fa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    19fe:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1a02:	80 34       	cpi	r24, 0x40	; 64
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <EEPROM_readByte+0x90>
        return ERROR;
    1a06:	1d 82       	std	Y+5, r1	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = I2C_readByteWithNACK();
    1a0a:	0e 94 16 08 	call	0x102c	; 0x102c <I2C_readByteWithNACK>
    1a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a10:	fc 81       	ldd	r31, Y+4	; 0x04
    1a12:	80 83       	st	Z, r24
    if (I2C_getStatus() != I2C_MR_DATA_NACK)
    1a14:	0e 94 29 08 	call	0x1052	; 0x1052 <I2C_getStatus>
    1a18:	88 35       	cpi	r24, 0x58	; 88
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <EEPROM_readByte+0xa6>
        return ERROR;
    1a1c:	1d 82       	std	Y+5, r1	; 0x05
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    I2C_stop();
    1a20:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <I2C_stop>

    return SUCCESS;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <BUZZER_init>:

/*
 * Description :
 -> Setup the direction for the buzzer pin as output pin.
 */
void BUZZER_init(){
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	63 e0       	ldi	r22, 0x03	; 3
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	63 e0       	ldi	r22, 0x03	; 3
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>

}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <BUZZER_on>:

/*
 * Description :
 -> Function to enable the Buzzer.
 */
void BUZZER_on(){
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	63 e0       	ldi	r22, 0x03	; 3
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>

}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <BUZZER_off>:

/*
 * Description :
 -> Function to disable the Buzzer.
 */
void BUZZER_off(){
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>

}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <main>:
/*______________________________________________________________________________
 |                       		  Main Function                       		    |
 |______________________________________________________________________________|
 */

int main (void){
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	c4 56       	subi	r28, 0x64	; 100
    1a9a:	d0 40       	sbci	r29, 0x00	; 0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
	uint8 PasswordTempVar;	/* Variable to hold the data of EEPROM before using it */
	uint8 PasswordSetFlag;	/* This flag is true when the password is successfully created */
	uint8 MultiUsedCounter;

	/* The configuration structure of the UART protocol */
	UART_ConfigType USART_MyConfig = {EIGHT_BIT_MODE , DISABLED_PARITY , ONE_STOP_BIT , 9600};
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	8b 5a       	subi	r24, 0xAB	; 171
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	a2 96       	adiw	r28, 0x22	; 34
    1aae:	9f af       	std	Y+63, r25	; 0x3f
    1ab0:	8e af       	std	Y+62, r24	; 0x3e
    1ab2:	a2 97       	sbiw	r28, 0x22	; 34
    1ab4:	2e e6       	ldi	r18, 0x6E	; 110
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	a4 96       	adiw	r28, 0x24	; 36
    1aba:	3f af       	std	Y+63, r19	; 0x3f
    1abc:	2e af       	std	Y+62, r18	; 0x3e
    1abe:	a4 97       	sbiw	r28, 0x24	; 36
    1ac0:	37 e0       	ldi	r19, 0x07	; 7
    1ac2:	a5 96       	adiw	r28, 0x25	; 37
    1ac4:	3f af       	std	Y+63, r19	; 0x3f
    1ac6:	a5 97       	sbiw	r28, 0x25	; 37
    1ac8:	a4 96       	adiw	r28, 0x24	; 36
    1aca:	ee ad       	ldd	r30, Y+62	; 0x3e
    1acc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ace:	a4 97       	sbiw	r28, 0x24	; 36
    1ad0:	00 80       	ld	r0, Z
    1ad2:	a4 96       	adiw	r28, 0x24	; 36
    1ad4:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ad6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ad8:	a4 97       	sbiw	r28, 0x24	; 36
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	a4 96       	adiw	r28, 0x24	; 36
    1ae0:	3f af       	std	Y+63, r19	; 0x3f
    1ae2:	2e af       	std	Y+62, r18	; 0x3e
    1ae4:	a4 97       	sbiw	r28, 0x24	; 36
    1ae6:	a2 96       	adiw	r28, 0x22	; 34
    1ae8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aea:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aec:	a2 97       	sbiw	r28, 0x22	; 34
    1aee:	00 82       	st	Z, r0
    1af0:	a2 96       	adiw	r28, 0x22	; 34
    1af2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1af4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1af6:	a2 97       	sbiw	r28, 0x22	; 34
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	a2 96       	adiw	r28, 0x22	; 34
    1afe:	3f af       	std	Y+63, r19	; 0x3f
    1b00:	2e af       	std	Y+62, r18	; 0x3e
    1b02:	a2 97       	sbiw	r28, 0x22	; 34
    1b04:	a5 96       	adiw	r28, 0x25	; 37
    1b06:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b08:	a5 97       	sbiw	r28, 0x25	; 37
    1b0a:	31 50       	subi	r19, 0x01	; 1
    1b0c:	a5 96       	adiw	r28, 0x25	; 37
    1b0e:	3f af       	std	Y+63, r19	; 0x3f
    1b10:	a5 97       	sbiw	r28, 0x25	; 37
    1b12:	a5 96       	adiw	r28, 0x25	; 37
    1b14:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b16:	a5 97       	sbiw	r28, 0x25	; 37
    1b18:	88 23       	and	r24, r24
    1b1a:	b1 f6       	brne	.-84     	; 0x1ac8 <main+0x3c>
	/* The configuration structure of the I2c protocol */
	I2C_ConfigType	I2C_MyConfig = {0x01 , BAUDRATE_400KHZ};
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e4 5a       	subi	r30, 0xA4	; 164
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 83       	st	Z, r24
    1b26:	fe 01       	movw	r30, r28
    1b28:	e4 5a       	subi	r30, 0xA4	; 164
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	81 83       	std	Z+1, r24	; 0x01

	SREG |= 1<<7;		/* Enabling Global Interrupts Service */
    1b30:	af e5       	ldi	r26, 0x5F	; 95
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef e5       	ldi	r30, 0x5F	; 95
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	8c 93       	st	X, r24

	UART_init(&USART_MyConfig);
    1b3e:	ce 01       	movw	r24, r28
    1b40:	8b 5a       	subi	r24, 0xAB	; 171
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	I2C_init(&I2C_MyConfig);
    1b48:	ce 01       	movw	r24, r28
    1b4a:	84 5a       	subi	r24, 0xA4	; 164
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	0e 94 b1 07 	call	0xf62	; 0xf62 <I2C_init>
	L293D_Init(CHANNEL1_MODE);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 76 0b 	call	0x16ec	; 0x16ec <L293D_Init>
	BUZZER_init();
    1b58:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <BUZZER_init>
	Timer1_setCallBack(timer1_tick);
    1b5c:	88 e2       	ldi	r24, 0x28	; 40
    1b5e:	92 e1       	ldi	r25, 0x12	; 18
    1b60:	0e 94 47 07 	call	0xe8e	; 0xe8e <Timer1_setCallBack>

	EEPROM_writeByte(PASSWORD_SET_FLAG_LOCATION , 0);
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EEPROM_writeByte>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ed 5b       	subi	r30, 0xBD	; 189
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e7       	ldi	r26, 0x70	; 112
    1b7a:	b1 e4       	ldi	r27, 0x41	; 65
    1b7c:	80 83       	st	Z, r24
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	a2 83       	std	Z+2, r26	; 0x02
    1b82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	8e 01       	movw	r16, r28
    1b86:	01 5c       	subi	r16, 0xC1	; 193
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ed 5b       	subi	r30, 0xBD	; 189
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	f8 01       	movw	r30, r16
    1baa:	80 83       	st	Z, r24
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	a2 83       	std	Z+2, r26	; 0x02
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ff 96       	adiw	r30, 0x3f	; 63
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <main+0x14c>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9e af       	std	Y+62, r25	; 0x3e
    1bd4:	8d af       	std	Y+61, r24	; 0x3d
    1bd6:	46 c0       	rjmp	.+140    	; 0x1c64 <main+0x1d8>
	else if (__tmp > 65535)
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ff 96       	adiw	r30, 0x3f	; 63
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	64 f5       	brge	.+88     	; 0x1c4c <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ed 5b       	subi	r30, 0xBD	; 189
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e af       	std	Y+62, r25	; 0x3e
    1c20:	8d af       	std	Y+61, r24	; 0x3d
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <main+0x1b6>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c af       	std	Y+60, r25	; 0x3c
    1c2a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <main+0x1a4>
    1c34:	9c af       	std	Y+60, r25	; 0x3c
    1c36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9e af       	std	Y+62, r25	; 0x3e
    1c40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <main+0x198>
    1c4a:	16 c0       	rjmp	.+44     	; 0x1c78 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ff 96       	adiw	r30, 0x3f	; 63
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e af       	std	Y+62, r25	; 0x3e
    1c62:	8d af       	std	Y+61, r24	; 0x3d
    1c64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c68:	9a af       	std	Y+58, r25	; 0x3a
    1c6a:	89 af       	std	Y+57, r24	; 0x39
    1c6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <main+0x1e4>
    1c74:	9a af       	std	Y+58, r25	; 0x3a
    1c76:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	while(1){

		switch(UART_recieveByte()){
    1c78:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	a0 96       	adiw	r28, 0x20	; 32
    1c82:	3f af       	std	Y+63, r19	; 0x3f
    1c84:	2e af       	std	Y+62, r18	; 0x3e
    1c86:	a0 97       	sbiw	r28, 0x20	; 32
    1c88:	a0 96       	adiw	r28, 0x20	; 32
    1c8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c8e:	a0 97       	sbiw	r28, 0x20	; 32
    1c90:	86 34       	cpi	r24, 0x46	; 70
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <main+0x20c>
    1c96:	30 c2       	rjmp	.+1120   	; 0x20f8 <main+0x66c>
    1c98:	a0 96       	adiw	r28, 0x20	; 32
    1c9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c9e:	a0 97       	sbiw	r28, 0x20	; 32
    1ca0:	e7 34       	cpi	r30, 0x47	; 71
    1ca2:	f1 05       	cpc	r31, r1
    1ca4:	c4 f4       	brge	.+48     	; 0x1cd6 <main+0x24a>
    1ca6:	a0 96       	adiw	r28, 0x20	; 32
    1ca8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1caa:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cac:	a0 97       	sbiw	r28, 0x20	; 32
    1cae:	22 34       	cpi	r18, 0x42	; 66
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <main+0x22a>
    1cb4:	48 c0       	rjmp	.+144    	; 0x1d46 <main+0x2ba>
    1cb6:	a0 96       	adiw	r28, 0x20	; 32
    1cb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cba:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cbc:	a0 97       	sbiw	r28, 0x20	; 32
    1cbe:	83 34       	cpi	r24, 0x43	; 67
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <main+0x23a>
    1cc4:	46 c0       	rjmp	.+140    	; 0x1d52 <main+0x2c6>
    1cc6:	a0 96       	adiw	r28, 0x20	; 32
    1cc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cca:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ccc:	a0 97       	sbiw	r28, 0x20	; 32
    1cce:	e1 34       	cpi	r30, 0x41	; 65
    1cd0:	f1 05       	cpc	r31, r1
    1cd2:	99 f1       	breq	.+102    	; 0x1d3a <main+0x2ae>
    1cd4:	d1 cf       	rjmp	.-94     	; 0x1c78 <main+0x1ec>
    1cd6:	a0 96       	adiw	r28, 0x20	; 32
    1cd8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cda:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cdc:	a0 97       	sbiw	r28, 0x20	; 32
    1cde:	2b 34       	cpi	r18, 0x4B	; 75
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <main+0x25a>
    1ce4:	04 c3       	rjmp	.+1544   	; 0x22ee <main+0x862>
    1ce6:	a0 96       	adiw	r28, 0x20	; 32
    1ce8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cea:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cec:	a0 97       	sbiw	r28, 0x20	; 32
    1cee:	8c 34       	cpi	r24, 0x4C	; 76
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	49 f0       	breq	.+18     	; 0x1d06 <main+0x27a>
    1cf4:	a0 96       	adiw	r28, 0x20	; 32
    1cf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cfa:	a0 97       	sbiw	r28, 0x20	; 32
    1cfc:	e7 34       	cpi	r30, 0x47	; 71
    1cfe:	f1 05       	cpc	r31, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <main+0x278>
    1d02:	bc c2       	rjmp	.+1400   	; 0x227c <main+0x7f0>
    1d04:	b9 cf       	rjmp	.-142    	; 0x1c78 <main+0x1ec>

		case IS_PASSWORD_SET:

			PasswordSetFlag = 0;
    1d06:	fe 01       	movw	r30, r28
    1d08:	ec 5a       	subi	r30, 0xAC	; 172
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	10 82       	st	Z, r1

			/* reading password set flag from EEPROM */
			EEPROM_readByte(PASSWORD_SET_FLAG_LOCATION , &PasswordSetFlag);
    1d0e:	9e 01       	movw	r18, r28
    1d10:	2c 5a       	subi	r18, 0xAC	; 172
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	b9 01       	movw	r22, r18
    1d1a:	0e 94 bd 0c 	call	0x197a	; 0x197a <EEPROM_readByte>

			if(PasswordSetFlag)				/* If the password was created */
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ec 5a       	subi	r30, 0xAC	; 172
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	88 23       	and	r24, r24
    1d28:	21 f0       	breq	.+8      	; 0x1d32 <main+0x2a6>
				UART_sendByte(SETTED);		/* Informing HMI ECU */
    1d2a:	8d e4       	ldi	r24, 0x4D	; 77
    1d2c:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    1d30:	a3 cf       	rjmp	.-186    	; 0x1c78 <main+0x1ec>

			else							/* If the password wasn't created yet */
				UART_sendByte(NOT_SETTED);	/* Informing HMI ECU */
    1d32:	8e e4       	ldi	r24, 0x4E	; 78
    1d34:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    1d38:	9f cf       	rjmp	.-194    	; 0x1c78 <main+0x1ec>

			break;

		case TAKE_THE_FIRST_PASSWORD :		/* Getting ready to receive the first password */

			receive_password(Password_Arr1);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	87 5b       	subi	r24, 0xB7	; 183
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	0e 94 88 11 	call	0x2310	; 0x2310 <receive_password>
    1d44:	99 cf       	rjmp	.-206    	; 0x1c78 <main+0x1ec>

			break;

		case TAKE_THE_SECOND_PASSWORD :		/* Getting ready to receive the second password */

			receive_password(Password_Arr2);
    1d46:	ce 01       	movw	r24, r28
    1d48:	82 5b       	subi	r24, 0xB2	; 178
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	0e 94 88 11 	call	0x2310	; 0x2310 <receive_password>
    1d50:	93 cf       	rjmp	.-218    	; 0x1c78 <main+0x1ec>

			break;

		case ARE_THEM_MATCHED :				/* Checking if the two passwords are identical or not */

			matching_flag = 1;
    1d52:	fe 01       	movw	r30, r28
    1d54:	e8 5b       	subi	r30, 0xB8	; 184
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	80 83       	st	Z, r24

			for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e9 5b       	subi	r30, 0xB9	; 185
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	10 82       	st	Z, r1
    1d64:	2a c0       	rjmp	.+84     	; 0x1dba <main+0x32e>
				if(Password_Arr1[MultiUsedCounter] != Password_Arr2[MultiUsedCounter]){
    1d66:	fe 01       	movw	r30, r28
    1d68:	e9 5b       	subi	r30, 0xB9	; 185
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	87 5b       	subi	r24, 0xB7	; 183
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e2 0f       	add	r30, r18
    1d7c:	f3 1f       	adc	r31, r19
    1d7e:	40 81       	ld	r20, Z
    1d80:	fe 01       	movw	r30, r28
    1d82:	e9 5b       	subi	r30, 0xB9	; 185
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	82 5b       	subi	r24, 0xB2	; 178
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	fc 01       	movw	r30, r24
    1d94:	e2 0f       	add	r30, r18
    1d96:	f3 1f       	adc	r31, r19
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 17       	cp	r20, r24
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <main+0x31c>
					matching_flag = 0;
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e8 5b       	subi	r30, 0xB8	; 184
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	10 82       	st	Z, r1
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <main+0x33a>

		case ARE_THEM_MATCHED :				/* Checking if the two passwords are identical or not */

			matching_flag = 1;

			for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    1da8:	de 01       	movw	r26, r28
    1daa:	a9 5b       	subi	r26, 0xB9	; 185
    1dac:	bf 4f       	sbci	r27, 0xFF	; 255
    1dae:	fe 01       	movw	r30, r28
    1db0:	e9 5b       	subi	r30, 0xB9	; 185
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	8c 93       	st	X, r24
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e9 5b       	subi	r30, 0xB9	; 185
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	85 30       	cpi	r24, 0x05	; 5
    1dc4:	80 f2       	brcs	.-96     	; 0x1d66 <main+0x2da>
					break;
				}

			}

			if(matching_flag){		/* If the two password are identical */
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e8 5b       	subi	r30, 0xB8	; 184
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <main+0x348>
    1dd2:	1c c1       	rjmp	.+568    	; 0x200c <main+0x580>

				UART_sendByte(MATCHED);		/* Informing HMI ECU that they are identical */
    1dd4:	84 e4       	ldi	r24, 0x44	; 68
    1dd6:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

				/* Store the password set flag into EEPROM */
				EEPROM_writeByte(PASSWORD_SET_FLAG_LOCATION , matching_flag);
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e8 5b       	subi	r30, 0xB8	; 184
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	60 81       	ld	r22, Z
    1de6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EEPROM_writeByte>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e7       	ldi	r26, 0x70	; 112
    1df0:	b1 e4       	ldi	r27, 0x41	; 65
    1df2:	8d ab       	std	Y+53, r24	; 0x35
    1df4:	9e ab       	std	Y+54, r25	; 0x36
    1df6:	af ab       	std	Y+55, r26	; 0x37
    1df8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1e00:	98 ad       	ldd	r25, Y+56	; 0x38
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	89 ab       	std	Y+49, r24	; 0x31
    1e14:	9a ab       	std	Y+50, r25	; 0x32
    1e16:	ab ab       	std	Y+51, r26	; 0x33
    1e18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e20:	9c a9       	ldd	r25, Y+52	; 0x34
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <main+0x3b0>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	98 ab       	std	Y+48, r25	; 0x30
    1e38:	8f a7       	std	Y+47, r24	; 0x2f
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <main+0x42e>
	else if (__tmp > 65535)
    1e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e40:	8b a9       	ldd	r24, Y+51	; 0x33
    1e42:	9c a9       	ldd	r25, Y+52	; 0x34
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <main+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6d a9       	ldd	r22, Y+53	; 0x35
    1e56:	7e a9       	ldd	r23, Y+54	; 0x36
    1e58:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <main+0x410>
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e a7       	std	Y+46, r25	; 0x2e
    1e84:	8d a7       	std	Y+45, r24	; 0x2d
    1e86:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e88:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <main+0x3fe>
    1e8e:	9e a7       	std	Y+46, r25	; 0x2e
    1e90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e94:	98 a9       	ldd	r25, Y+48	; 0x30
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	98 ab       	std	Y+48, r25	; 0x30
    1e9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <main+0x3f2>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <main+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1eac:	9c a9       	ldd	r25, Y+52	; 0x34
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebe:	9c a7       	std	Y+44, r25	; 0x2c
    1ec0:	8b a7       	std	Y+43, r24	; 0x2b
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <main+0x43a>
    1eca:	9c a7       	std	Y+44, r25	; 0x2c
    1ecc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(15);

				for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e9 5b       	subi	r30, 0xB9	; 185
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	10 82       	st	Z, r1
    1ed6:	92 c0       	rjmp	.+292    	; 0x1ffc <main+0x570>
					EEPROM_writeByte(MultiUsedCounter , Password_Arr1[MultiUsedCounter]);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e9 5b       	subi	r30, 0xB9	; 185
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e9 5b       	subi	r30, 0xB9	; 185
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	87 5b       	subi	r24, 0xB7	; 183
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e2 0f       	add	r30, r18
    1efa:	f3 1f       	adc	r31, r19
    1efc:	20 81       	ld	r18, Z
    1efe:	ca 01       	movw	r24, r20
    1f00:	62 2f       	mov	r22, r18
    1f02:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EEPROM_writeByte>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e2       	ldi	r26, 0x20	; 32
    1f0c:	b1 e4       	ldi	r27, 0x41	; 65
    1f0e:	8f a3       	std	Y+39, r24	; 0x27
    1f10:	98 a7       	std	Y+40, r25	; 0x28
    1f12:	a9 a7       	std	Y+41, r26	; 0x29
    1f14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6f a1       	ldd	r22, Y+39	; 0x27
    1f18:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a ef       	ldi	r20, 0xFA	; 250
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8b a3       	std	Y+35, r24	; 0x23
    1f30:	9c a3       	std	Y+36, r25	; 0x24
    1f32:	ad a3       	std	Y+37, r26	; 0x25
    1f34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f36:	6b a1       	ldd	r22, Y+35	; 0x23
    1f38:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <main+0x4cc>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9a a3       	std	Y+34, r25	; 0x22
    1f54:	89 a3       	std	Y+33, r24	; 0x21
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <main+0x54a>
	else if (__tmp > 65535)
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <main+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6f a1       	ldd	r22, Y+39	; 0x27
    1f72:	78 a5       	ldd	r23, Y+40	; 0x28
    1f74:	89 a5       	ldd	r24, Y+41	; 0x29
    1f76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <main+0x52c>
    1f9a:	88 ec       	ldi	r24, 0xC8	; 200
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	98 a3       	std	Y+32, r25	; 0x20
    1fa0:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa4:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <main+0x51a>
    1faa:	98 a3       	std	Y+32, r25	; 0x20
    1fac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9a a3       	std	Y+34, r25	; 0x22
    1fb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fba:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <main+0x50e>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <main+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9a a3       	std	Y+34, r25	; 0x22
    1fd4:	89 a3       	std	Y+33, r24	; 0x21
    1fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fda:	9e 8f       	std	Y+30, r25	; 0x1e
    1fdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <main+0x556>
    1fe6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe8:	8d 8f       	std	Y+29, r24	; 0x1d

				/* Store the password set flag into EEPROM */
				EEPROM_writeByte(PASSWORD_SET_FLAG_LOCATION , matching_flag);
				_delay_ms(15);

				for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    1fea:	de 01       	movw	r26, r28
    1fec:	a9 5b       	subi	r26, 0xB9	; 185
    1fee:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e9 5b       	subi	r30, 0xB9	; 185
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	8c 93       	st	X, r24
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 5b       	subi	r30, 0xB9	; 185
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	85 30       	cpi	r24, 0x05	; 5
    2006:	08 f4       	brcc	.+2      	; 0x200a <main+0x57e>
    2008:	67 cf       	rjmp	.-306    	; 0x1ed8 <main+0x44c>
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <main+0x586>
				}

			}

			else {
				UART_sendByte(UNMATCHED);
    200c:	85 e4       	ldi	r24, 0x45	; 69
    200e:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e2       	ldi	r26, 0x20	; 32
    2018:	b1 e4       	ldi	r27, 0x41	; 65
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a ef       	ldi	r20, 0xFA	; 250
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <main+0x5d8>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <main+0x656>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <main+0x638>
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <main+0x626>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <main+0x61a>
    20cc:	d5 cd       	rjmp	.-1110   	; 0x1c78 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <main+0x662>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
    20f6:	c0 cd       	rjmp	.-1152   	; 0x1c78 <main+0x1ec>
			_delay_ms(10);
			break;

		case TAKE_MAIN_PASSWORD :		/* Checking if the password is correct or not */

			matching_flag = 1;
    20f8:	fe 01       	movw	r30, r28
    20fa:	e8 5b       	subi	r30, 0xB8	; 184
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	80 83       	st	Z, r24

			receive_password(Password_Arr1);	/* Receiving the password from HMI ECU */
    2102:	ce 01       	movw	r24, r28
    2104:	87 5b       	subi	r24, 0xB7	; 183
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	0e 94 88 11 	call	0x2310	; 0x2310 <receive_password>

			for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    210c:	fe 01       	movw	r30, r28
    210e:	e9 5b       	subi	r30, 0xB9	; 185
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	10 82       	st	Z, r1
    2114:	9e c0       	rjmp	.+316    	; 0x2252 <main+0x7c6>
				EEPROM_readByte(MultiUsedCounter , &PasswordTempVar);
    2116:	fe 01       	movw	r30, r28
    2118:	e9 5b       	subi	r30, 0xB9	; 185
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e 01       	movw	r18, r28
    2124:	2d 5a       	subi	r18, 0xAD	; 173
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 bd 0c 	call	0x197a	; 0x197a <EEPROM_readByte>
				if(Password_Arr1[MultiUsedCounter] != PasswordTempVar)
    212e:	fe 01       	movw	r30, r28
    2130:	e9 5b       	subi	r30, 0xB9	; 185
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	ce 01       	movw	r24, r28
    213c:	87 5b       	subi	r24, 0xB7	; 183
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	fc 01       	movw	r30, r24
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	90 81       	ld	r25, Z
    2148:	fe 01       	movw	r30, r28
    214a:	ed 5a       	subi	r30, 0xAD	; 173
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	98 17       	cp	r25, r24
    2152:	21 f0       	breq	.+8      	; 0x215c <main+0x6d0>
					matching_flag = 0;
    2154:	fe 01       	movw	r30, r28
    2156:	e8 5b       	subi	r30, 0xB8	; 184
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	10 82       	st	Z, r1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e2       	ldi	r26, 0x20	; 32
    2162:	b1 e4       	ldi	r27, 0x41	; 65
    2164:	8b 87       	std	Y+11, r24	; 0x0b
    2166:	9c 87       	std	Y+12, r25	; 0x0c
    2168:	ad 87       	std	Y+13, r26	; 0x0d
    216a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a ef       	ldi	r20, 0xFA	; 250
    217a:	54 e4       	ldi	r21, 0x44	; 68
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8f 83       	std	Y+7, r24	; 0x07
    2186:	98 87       	std	Y+8, r25	; 0x08
    2188:	a9 87       	std	Y+9, r26	; 0x09
    218a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <main+0x722>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <main+0x7a0>
	else if (__tmp > 65535)
    21ae:	6f 81       	ldd	r22, Y+7	; 0x07
    21b0:	78 85       	ldd	r23, Y+8	; 0x08
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <main+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <main+0x782>
    21f0:	88 ec       	ldi	r24, 0xC8	; 200
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <main+0x770>
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <main+0x764>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <main+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <main+0x7ac>
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01

			matching_flag = 1;

			receive_password(Password_Arr1);	/* Receiving the password from HMI ECU */

			for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    2240:	de 01       	movw	r26, r28
    2242:	a9 5b       	subi	r26, 0xB9	; 185
    2244:	bf 4f       	sbci	r27, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e9 5b       	subi	r30, 0xB9	; 185
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	8c 93       	st	X, r24
    2252:	fe 01       	movw	r30, r28
    2254:	e9 5b       	subi	r30, 0xB9	; 185
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	85 30       	cpi	r24, 0x05	; 5
    225c:	08 f4       	brcc	.+2      	; 0x2260 <main+0x7d4>
    225e:	5b cf       	rjmp	.-330    	; 0x2116 <main+0x68a>
				if(Password_Arr1[MultiUsedCounter] != PasswordTempVar)
					matching_flag = 0;
				_delay_ms(10);
			}

			if(matching_flag)
    2260:	fe 01       	movw	r30, r28
    2262:	e8 5b       	subi	r30, 0xB8	; 184
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	88 23       	and	r24, r24
    226a:	21 f0       	breq	.+8      	; 0x2274 <main+0x7e8>
				UART_sendByte(CORRECT_PASSWORD);	/* Informing HMI ECU that the password is correct */
    226c:	89 e4       	ldi	r24, 0x49	; 73
    226e:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    2272:	02 cd       	rjmp	.-1532   	; 0x1c78 <main+0x1ec>

			else
				UART_sendByte(WRONG_PASSWORD);		/* Informing HMI ECU that the password is wrong */
    2274:	8a e4       	ldi	r24, 0x4A	; 74
    2276:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    227a:	fe cc       	rjmp	.-1540   	; 0x1c78 <main+0x1ec>

			break;

		case OPEN_DOOR	:							/* Unlocking the door */

			Timer1_init(&Timer1Config);
    227c:	88 e6       	ldi	r24, 0x68	; 104
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>

			L293D_Rotate(1 , CW , 100);
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	44 e6       	ldi	r20, 0x64	; 100
    228a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <L293D_Rotate>
			while(Timer1Ticks != 15);		/* waiting 15 seconds*/
    228e:	80 91 78 00 	lds	r24, 0x0078
    2292:	8f 30       	cpi	r24, 0x0F	; 15
    2294:	e1 f7       	brne	.-8      	; 0x228e <main+0x802>
			Timer1Ticks = 0;
    2296:	10 92 78 00 	sts	0x0078, r1
			Timer1_deInit();
    229a:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
			Timer1_init(&Timer1Config);
    229e:	88 e6       	ldi	r24, 0x68	; 104
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>

			L293D_Rotate(1 , OFF , 0);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <L293D_Rotate>
			while(Timer1Ticks != 3);		/* waiting 3 seconds*/
    22b0:	80 91 78 00 	lds	r24, 0x0078
    22b4:	83 30       	cpi	r24, 0x03	; 3
    22b6:	e1 f7       	brne	.-8      	; 0x22b0 <main+0x824>
			Timer1Ticks = 0;
    22b8:	10 92 78 00 	sts	0x0078, r1
			Timer1_deInit();
    22bc:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
			Timer1_init(&Timer1Config);
    22c0:	88 e6       	ldi	r24, 0x68	; 104
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>

			L293D_Rotate(1 , A_CW , 100);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	44 e6       	ldi	r20, 0x64	; 100
    22ce:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <L293D_Rotate>
			while(Timer1Ticks != 15);		/* waiting 15 seconds*/
    22d2:	80 91 78 00 	lds	r24, 0x0078
    22d6:	8f 30       	cpi	r24, 0x0F	; 15
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <main+0x846>
			Timer1Ticks = 0;
    22da:	10 92 78 00 	sts	0x0078, r1
			Timer1_deInit();
    22de:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>

			L293D_Rotate(1 , OFF , 0);
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <L293D_Rotate>
    22ec:	c5 cc       	rjmp	.-1654   	; 0x1c78 <main+0x1ec>

			break;

		case ALARM_MODE :				/* Alarm mode */

			Timer1_init(&Timer1Config);
    22ee:	88 e6       	ldi	r24, 0x68	; 104
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>
			BUZZER_on();
    22f6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <BUZZER_on>
			while(Timer1Ticks != 60);	/* waiting 60 seconds*/
    22fa:	80 91 78 00 	lds	r24, 0x0078
    22fe:	8c 33       	cpi	r24, 0x3C	; 60
    2300:	e1 f7       	brne	.-8      	; 0x22fa <main+0x86e>
			Timer1Ticks = 0;
    2302:	10 92 78 00 	sts	0x0078, r1
			Timer1_deInit();
    2306:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>

			BUZZER_off();
    230a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <BUZZER_off>
    230e:	b4 cc       	rjmp	.-1688   	; 0x1c78 <main+0x1ec>

00002310 <receive_password>:
		}
	}
	return 0;
}

void receive_password(uint8 *PasswordArr){
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	61 97       	sbiw	r28, 0x11	; 17
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	99 8b       	std	Y+17, r25	; 0x11
    232a:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i = 0 ; i < 5 ; i++){
    232c:	1f 86       	std	Y+15, r1	; 0x0f
    232e:	81 c0       	rjmp	.+258    	; 0x2432 <receive_password+0x122>
		PasswordArr[i] = UART_recieveByte();
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	88 89       	ldd	r24, Y+16	; 0x10
    2338:	99 89       	ldd	r25, Y+17	; 0x11
    233a:	8c 01       	movw	r16, r24
    233c:	02 0f       	add	r16, r18
    233e:	13 1f       	adc	r17, r19
    2340:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    2344:	f8 01       	movw	r30, r16
    2346:	80 83       	st	Z, r24
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e7       	ldi	r26, 0x70	; 112
    234e:	b1 e4       	ldi	r27, 0x41	; 65
    2350:	8b 87       	std	Y+11, r24	; 0x0b
    2352:	9c 87       	std	Y+12, r25	; 0x0c
    2354:	ad 87       	std	Y+13, r26	; 0x0d
    2356:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6b 85       	ldd	r22, Y+11	; 0x0b
    235a:	7c 85       	ldd	r23, Y+12	; 0x0c
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8f 83       	std	Y+7, r24	; 0x07
    2372:	98 87       	std	Y+8, r25	; 0x08
    2374:	a9 87       	std	Y+9, r26	; 0x09
    2376:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <receive_password+0x8a>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <receive_password+0x108>
	else if (__tmp > 65535)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <receive_password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <receive_password+0xea>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <receive_password+0xd8>
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <receive_password+0xcc>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <receive_password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	9a 83       	std	Y+2, r25	; 0x02
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <receive_password+0x114>
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}

void receive_password(uint8 *PasswordArr){
	for(uint8 i = 0 ; i < 5 ; i++){
    242c:	8f 85       	ldd	r24, Y+15	; 0x0f
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	85 30       	cpi	r24, 0x05	; 5
    2436:	08 f4       	brcc	.+2      	; 0x243a <receive_password+0x12a>
    2438:	7b cf       	rjmp	.-266    	; 0x2330 <receive_password+0x20>
		PasswordArr[i] = UART_recieveByte();
		_delay_ms(15);
	}
}
    243a:	61 96       	adiw	r28, 0x11	; 17
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	08 95       	ret

00002450 <timer1_tick>:
void timer1_tick(void){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	Timer1Ticks++;
    2458:	80 91 78 00 	lds	r24, 0x0078
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 78 00 	sts	0x0078, r24
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <__udivmodhi4>:
    2468:	aa 1b       	sub	r26, r26
    246a:	bb 1b       	sub	r27, r27
    246c:	51 e1       	ldi	r21, 0x11	; 17
    246e:	07 c0       	rjmp	.+14     	; 0x247e <__udivmodhi4_ep>

00002470 <__udivmodhi4_loop>:
    2470:	aa 1f       	adc	r26, r26
    2472:	bb 1f       	adc	r27, r27
    2474:	a6 17       	cp	r26, r22
    2476:	b7 07       	cpc	r27, r23
    2478:	10 f0       	brcs	.+4      	; 0x247e <__udivmodhi4_ep>
    247a:	a6 1b       	sub	r26, r22
    247c:	b7 0b       	sbc	r27, r23

0000247e <__udivmodhi4_ep>:
    247e:	88 1f       	adc	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	5a 95       	dec	r21
    2484:	a9 f7       	brne	.-22     	; 0x2470 <__udivmodhi4_loop>
    2486:	80 95       	com	r24
    2488:	90 95       	com	r25
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	08 95       	ret

00002490 <__udivmodsi4>:
    2490:	a1 e2       	ldi	r26, 0x21	; 33
    2492:	1a 2e       	mov	r1, r26
    2494:	aa 1b       	sub	r26, r26
    2496:	bb 1b       	sub	r27, r27
    2498:	fd 01       	movw	r30, r26
    249a:	0d c0       	rjmp	.+26     	; 0x24b6 <__udivmodsi4_ep>

0000249c <__udivmodsi4_loop>:
    249c:	aa 1f       	adc	r26, r26
    249e:	bb 1f       	adc	r27, r27
    24a0:	ee 1f       	adc	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	a2 17       	cp	r26, r18
    24a6:	b3 07       	cpc	r27, r19
    24a8:	e4 07       	cpc	r30, r20
    24aa:	f5 07       	cpc	r31, r21
    24ac:	20 f0       	brcs	.+8      	; 0x24b6 <__udivmodsi4_ep>
    24ae:	a2 1b       	sub	r26, r18
    24b0:	b3 0b       	sbc	r27, r19
    24b2:	e4 0b       	sbc	r30, r20
    24b4:	f5 0b       	sbc	r31, r21

000024b6 <__udivmodsi4_ep>:
    24b6:	66 1f       	adc	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	1a 94       	dec	r1
    24c0:	69 f7       	brne	.-38     	; 0x249c <__udivmodsi4_loop>
    24c2:	60 95       	com	r22
    24c4:	70 95       	com	r23
    24c6:	80 95       	com	r24
    24c8:	90 95       	com	r25
    24ca:	9b 01       	movw	r18, r22
    24cc:	ac 01       	movw	r20, r24
    24ce:	bd 01       	movw	r22, r26
    24d0:	cf 01       	movw	r24, r30
    24d2:	08 95       	ret

000024d4 <__prologue_saves__>:
    24d4:	2f 92       	push	r2
    24d6:	3f 92       	push	r3
    24d8:	4f 92       	push	r4
    24da:	5f 92       	push	r5
    24dc:	6f 92       	push	r6
    24de:	7f 92       	push	r7
    24e0:	8f 92       	push	r8
    24e2:	9f 92       	push	r9
    24e4:	af 92       	push	r10
    24e6:	bf 92       	push	r11
    24e8:	cf 92       	push	r12
    24ea:	df 92       	push	r13
    24ec:	ef 92       	push	r14
    24ee:	ff 92       	push	r15
    24f0:	0f 93       	push	r16
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	ca 1b       	sub	r28, r26
    24fe:	db 0b       	sbc	r29, r27
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	09 94       	ijmp

0000250c <__epilogue_restores__>:
    250c:	2a 88       	ldd	r2, Y+18	; 0x12
    250e:	39 88       	ldd	r3, Y+17	; 0x11
    2510:	48 88       	ldd	r4, Y+16	; 0x10
    2512:	5f 84       	ldd	r5, Y+15	; 0x0f
    2514:	6e 84       	ldd	r6, Y+14	; 0x0e
    2516:	7d 84       	ldd	r7, Y+13	; 0x0d
    2518:	8c 84       	ldd	r8, Y+12	; 0x0c
    251a:	9b 84       	ldd	r9, Y+11	; 0x0b
    251c:	aa 84       	ldd	r10, Y+10	; 0x0a
    251e:	b9 84       	ldd	r11, Y+9	; 0x09
    2520:	c8 84       	ldd	r12, Y+8	; 0x08
    2522:	df 80       	ldd	r13, Y+7	; 0x07
    2524:	ee 80       	ldd	r14, Y+6	; 0x06
    2526:	fd 80       	ldd	r15, Y+5	; 0x05
    2528:	0c 81       	ldd	r16, Y+4	; 0x04
    252a:	1b 81       	ldd	r17, Y+3	; 0x03
    252c:	aa 81       	ldd	r26, Y+2	; 0x02
    252e:	b9 81       	ldd	r27, Y+1	; 0x01
    2530:	ce 0f       	add	r28, r30
    2532:	d1 1d       	adc	r29, r1
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	ed 01       	movw	r28, r26
    2540:	08 95       	ret

00002542 <_exit>:
    2542:	f8 94       	cli

00002544 <__stop_program>:
    2544:	ff cf       	rjmp	.-2      	; 0x2544 <__stop_program>

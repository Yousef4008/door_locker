
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000038a8  0000393c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080017a  0080017a  00003a56  2**0
                  ALLOC
  3 .stab         000034c8  00000000  00000000  00003a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000178e  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000087ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000895e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b492  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 11 	call	0x2214	; 0x2214 <main>
      8a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e4       	ldi	r26, 0x4D	; 77
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e4       	ldi	r24, 0x4D	; 77
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
    1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
    2. Enable the UART.
    3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* -> U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 -> RXEN  = 1 Receiver Enable
	 -> RXEN  = 1 Transmitter Enable
	 -> UCSZ2 = 0 For 5-bit/6-bit/7-bit/8-bit data mode
	 -> RXB8 & TXB8 used for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 -> UPM1:0  = parity bit mode
	 -> USBS    = stop bit mode
	 -> UCSZ1:0 = number of data bits (Character Size)
	 -> UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity) | (Config_Ptr->bit_data) | (Config_Ptr->stop_bit);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	80 81       	ld	r24, Z
     b7a:	98 2b       	or	r25, r24
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	89 2b       	or	r24, r25
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	8c 93       	st	X, r24
	
	/* -> Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	94 81       	ldd	r25, Z+4	; 0x04
     b90:	a5 81       	ldd	r26, Z+5	; 0x05
     b92:	b6 81       	ldd	r27, Z+6	; 0x06
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	aa 1f       	adc	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	aa 1f       	adc	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	aa 1f       	adc	r26, r26
     baa:	bb 1f       	adc	r27, r27
     bac:	9c 01       	movw	r18, r24
     bae:	ad 01       	movw	r20, r26
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	92 e1       	ldi	r25, 0x12	; 18
     bb4:	aa e7       	ldi	r26, 0x7A	; 122
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	bc 01       	movw	r22, r24
     bba:	cd 01       	movw	r24, r26
     bbc:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
     bc0:	da 01       	movw	r26, r20
     bc2:	c9 01       	movw	r24, r18
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01

	/* -> First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	89 2f       	mov	r24, r25
     bd4:	99 27       	eor	r25, r25
     bd6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bd8:	e9 e2       	ldi	r30, 0x29	; 41
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 83       	st	Z, r24
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <UART_sendByte>:
/*
 * Description :
 -> Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 -> UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	    transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bfa:	eb e2       	ldi	r30, 0x2B	; 43
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	80 72       	andi	r24, 0x20	; 32
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	b9 f3       	breq	.-18     	; 0xbfa <UART_sendByte+0xc>

	/*
	 -> Put the required data in the UDR register and it also clear the UDRE flag as
	    the UDR register is not empty now
	 */
	UDR = data;
     c0c:	ec e2       	ldi	r30, 0x2C	; 44
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	80 83       	st	Z, r24

}
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <UART_recieveByte>:
/*
 * Description :
 -> Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	dc f7       	brge	.-10     	; 0xc24 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c2e:	ec e2       	ldi	r30, 0x2C	; 44
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <UART_sendString>:
/*
 * Description :
 -> Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <UART_sendString+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	80 81       	ld	r24, Z
     c60:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
		i++;
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	fc 01       	movw	r30, r24
     c76:	e2 0f       	add	r30, r18
     c78:	f3 1f       	adc	r31, r19
     c7a:	80 81       	ld	r24, Z
     c7c:	88 23       	and	r24, r24
     c7e:	39 f7       	brne	.-50     	; 0xc4e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_receiveString+0xa>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	8c 01       	movw	r16, r24
     cae:	02 0f       	add	r16, r18
     cb0:	13 1f       	adc	r17, r19
     cb2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
     cba:	0f c0       	rjmp	.+30     	; 0xcda <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	8c 01       	movw	r16, r24
     cce:	02 0f       	add	r16, r18
     cd0:	13 1f       	adc	r17, r19
     cd2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	fc 01       	movw	r30, r24
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	80 81       	ld	r24, Z
     cec:	83 32       	cpi	r24, 0x23	; 35
     cee:	31 f7       	brne	.-52     	; 0xcbc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	10 82       	st	Z, r1
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <__vector_9>:
/*______________________________________________________________________________
 |                           Interrupt Service Routine                          |
 |______________________________________________________________________________|
 */

ISR (TIMER1_OVF_vect){
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     d3c:	80 91 7a 01 	lds	r24, 0x017A
     d40:	90 91 7b 01 	lds	r25, 0x017B
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	29 f0       	breq	.+10     	; 0xd52 <__vector_9+0x40>
		(*target_routine)();
     d48:	e0 91 7a 01 	lds	r30, 0x017A
     d4c:	f0 91 7b 01 	lds	r31, 0x017B
     d50:	09 95       	icall
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_7>:

ISR (TIMER1_COMPA_vect){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     da2:	80 91 7a 01 	lds	r24, 0x017A
     da6:	90 91 7b 01 	lds	r25, 0x017B
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	29 f0       	breq	.+10     	; 0xdb8 <__vector_7+0x40>
		(*target_routine)();
     dae:	e0 91 7a 01 	lds	r30, 0x017A
     db2:	f0 91 7b 01 	lds	r31, 0x017B
     db6:	09 95       	icall
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <Timer1_init>:
 -> Functional responsible for Initialize Timer1 by:
    1. Setting the initial value of the counter
    2. Setup the mode (Normal / Compare)
    3. Setup the prescaler
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <Timer1_init+0x6>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
     dec:	ac e4       	ldi	r26, 0x4C	; 76
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	9c 93       	st	X, r25
     dfc:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == NORMAL_MODE){
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	85 81       	ldd	r24, Z+5	; 0x05
     e04:	88 23       	and	r24, r24
     e06:	91 f4       	brne	.+36     	; 0xe2c <Timer1_init+0x4e>

		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
     e08:	a9 e5       	ldi	r26, 0x59	; 89
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e9 e5       	ldi	r30, 0x59	; 89
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 1)
		 */

		TCCR1A = (1<<FOC1A);
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 1)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler;
     e1e:	ae e4       	ldi	r26, 0x4E	; 78
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	8c 93       	st	X, r24
     e2a:	1e c0       	rjmp	.+60     	; 0xe68 <Timer1_init+0x8a>

	}
	else {

		OCR1A = Config_Ptr->compare_value;
     e2c:	aa e4       	ldi	r26, 0x4A	; 74
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e9 81       	ldd	r30, Y+1	; 0x01
     e32:	fa 81       	ldd	r31, Y+2	; 0x02
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     e3e:	a9 e5       	ldi	r26, 0x59	; 89
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 e5       	ldi	r30, 0x59	; 89
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
     e4c:	ef e4       	ldi	r30, 0x4F	; 79
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	88 e0       	ldi	r24, 0x08	; 8
     e52:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
     e54:	ae e4       	ldi	r26, 0x4E	; 78
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	94 81       	ldd	r25, Z+4	; 0x04
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	85 81       	ldd	r24, Z+5	; 0x05
     e64:	89 2b       	or	r24, r25
     e66:	8c 93       	st	X, r24
	}
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <Timer1_deInit>:

/*
 * Description :
 -> Functional responsible for uninitialize timer1
 */
void Timer1_deInit(void){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     e7a:	ec e4       	ldi	r30, 0x4C	; 76
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	10 82       	st	Z, r1
	TCCR1B = 0;
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <Timer1_setCallBack>:

/*
 * Description :
 -> Functional responsible for setting the call back function
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <Timer1_setCallBack+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	target_routine = a_ptr;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	90 93 7b 01 	sts	0x017B, r25
     ea4:	80 93 7a 01 	sts	0x017A, r24
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <GPIO_setupPinDirection>:
 * Description :
 -> Setup the direction of the required pin input/output.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_setupPinDirection+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <GPIO_setupPinDirection+0x8>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	6a 83       	std	Y+2, r22	; 0x02
     ec4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	88 30       	cpi	r24, 0x08	; 8
     eca:	08 f0       	brcs	.+2      	; 0xece <GPIO_setupPinDirection+0x1c>
     ecc:	d5 c0       	rjmp	.+426    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	84 30       	cpi	r24, 0x04	; 4
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <GPIO_setupPinDirection+0x24>
     ed4:	d1 c0       	rjmp	.+418    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <GPIO_setupPinDirection+0x3a>
     eea:	43 c0       	rjmp	.+134    	; 0xf72 <GPIO_setupPinDirection+0xc0>
     eec:	2c 81       	ldd	r18, Y+4	; 0x04
     eee:	3d 81       	ldd	r19, Y+5	; 0x05
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <GPIO_setupPinDirection+0x4e>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	71 f0       	breq	.+28     	; 0xf1a <GPIO_setupPinDirection+0x68>
     efe:	bc c0       	rjmp	.+376    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
     f00:	2c 81       	ldd	r18, Y+4	; 0x04
     f02:	3d 81       	ldd	r19, Y+5	; 0x05
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <GPIO_setupPinDirection+0x5a>
     f0a:	5f c0       	rjmp	.+190    	; 0xfca <GPIO_setupPinDirection+0x118>
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <GPIO_setupPinDirection+0x66>
     f16:	85 c0       	rjmp	.+266    	; 0x1022 <GPIO_setupPinDirection+0x170>
     f18:	af c0       	rjmp	.+350    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f20:	aa e3       	ldi	r26, 0x3A	; 58
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ea e3       	ldi	r30, 0x3A	; 58
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_setupPinDirection+0x8c>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_setupPinDirection+0x88>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	98 c0       	rjmp	.+304    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f48:	aa e3       	ldi	r26, 0x3A	; 58
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e3       	ldi	r30, 0x3A	; 58
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_setupPinDirection+0xb4>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_setupPinDirection+0xb0>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	83 c0       	rjmp	.+262    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	a1 f4       	brne	.+40     	; 0xfa0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f78:	a7 e3       	ldi	r26, 0x37	; 55
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e7 e3       	ldi	r30, 0x37	; 55
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_setupPinDirection+0xe4>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_setupPinDirection+0xe0>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	6c c0       	rjmp	.+216    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fa0:	a7 e3       	ldi	r26, 0x37	; 55
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_setupPinDirection+0x10c>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_setupPinDirection+0x108>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	57 c0       	rjmp	.+174    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	a1 f4       	brne	.+40     	; 0xff8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fd0:	a4 e3       	ldi	r26, 0x34	; 52
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e4 e3       	ldi	r30, 0x34	; 52
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_setupPinDirection+0x13c>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_setupPinDirection+0x138>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	40 c0       	rjmp	.+128    	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ff8:	a4 e3       	ldi	r26, 0x34	; 52
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e4 e3       	ldi	r30, 0x34	; 52
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_setupPinDirection+0x164>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_setupPinDirection+0x160>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	2b c0       	rjmp	.+86     	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	a1 f4       	brne	.+40     	; 0x1050 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1028:	a1 e3       	ldi	r26, 0x31	; 49
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e1 e3       	ldi	r30, 0x31	; 49
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_setupPinDirection+0x194>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_setupPinDirection+0x190>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1050:	a1 e3       	ldi	r26, 0x31	; 49
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e1 e3       	ldi	r30, 0x31	; 49
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_setupPinDirection+0x1bc>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_setupPinDirection+0x1b8>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <GPIO_writePin>:
 -> Write the value Logic High or Logic Low on the required pin.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 -> If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_writePin+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <GPIO_writePin+0x8>
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	6a 83       	std	Y+2, r22	; 0x02
    109a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <GPIO_writePin+0x1c>
    10a2:	d5 c0       	rjmp	.+426    	; 0x124e <GPIO_writePin+0x1c6>
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <GPIO_writePin+0x24>
    10aa:	d1 c0       	rjmp	.+418    	; 0x124e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3d 83       	std	Y+5, r19	; 0x05
    10b4:	2c 83       	std	Y+4, r18	; 0x04
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <GPIO_writePin+0x3a>
    10c0:	43 c0       	rjmp	.+134    	; 0x1148 <GPIO_writePin+0xc0>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <GPIO_writePin+0x4e>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <GPIO_writePin+0x68>
    10d4:	bc c0       	rjmp	.+376    	; 0x124e <GPIO_writePin+0x1c6>
    10d6:	2c 81       	ldd	r18, Y+4	; 0x04
    10d8:	3d 81       	ldd	r19, Y+5	; 0x05
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <GPIO_writePin+0x5a>
    10e0:	5f c0       	rjmp	.+190    	; 0x11a0 <GPIO_writePin+0x118>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	09 f4       	brne	.+2      	; 0x10ee <GPIO_writePin+0x66>
    10ec:	85 c0       	rjmp	.+266    	; 0x11f8 <GPIO_writePin+0x170>
    10ee:	af c0       	rjmp	.+350    	; 0x124e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	a1 f4       	brne	.+40     	; 0x111e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_writePin+0x8c>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_writePin+0x88>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	98 c0       	rjmp	.+304    	; 0x124e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    111e:	ab e3       	ldi	r26, 0x3B	; 59
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_writePin+0xb4>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_writePin+0xb0>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	83 c0       	rjmp	.+262    	; 0x124e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	a1 f4       	brne	.+40     	; 0x1176 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GPIO_writePin+0xe4>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <GPIO_writePin+0xe0>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	6c c0       	rjmp	.+216    	; 0x124e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1176:	a8 e3       	ldi	r26, 0x38	; 56
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e8 e3       	ldi	r30, 0x38	; 56
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_writePin+0x10c>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_writePin+0x108>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	57 c0       	rjmp	.+174    	; 0x124e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11a6:	a5 e3       	ldi	r26, 0x35	; 53
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e3       	ldi	r30, 0x35	; 53
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GPIO_writePin+0x13c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GPIO_writePin+0x138>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	40 c0       	rjmp	.+128    	; 0x124e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11ce:	a5 e3       	ldi	r26, 0x35	; 53
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e3       	ldi	r30, 0x35	; 53
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_writePin+0x164>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_writePin+0x160>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	2b c0       	rjmp	.+86     	; 0x124e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_writePin+0x194>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_writePin+0x190>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	14 c0       	rjmp	.+40     	; 0x124e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1226:	a2 e3       	ldi	r26, 0x32	; 50
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_writePin+0x1bc>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_writePin+0x1b8>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <GPIO_readPin>:
 * Description :
 -> Read and return the value for the required pin, it should be Logic High or Logic Low.
 -> If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <GPIO_readPin+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_readPin+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1270:	19 82       	std	Y+1, r1	; 0x01
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 30       	cpi	r24, 0x08	; 8
    1276:	08 f0       	brcs	.+2      	; 0x127a <GPIO_readPin+0x1c>
    1278:	84 c0       	rjmp	.+264    	; 0x1382 <GPIO_readPin+0x124>
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	08 f0       	brcs	.+2      	; 0x1282 <GPIO_readPin+0x24>
    1280:	80 c0       	rjmp	.+256    	; 0x1382 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3d 83       	std	Y+5, r19	; 0x05
    128a:	2c 83       	std	Y+4, r18	; 0x04
    128c:	4c 81       	ldd	r20, Y+4	; 0x04
    128e:	5d 81       	ldd	r21, Y+5	; 0x05
    1290:	41 30       	cpi	r20, 0x01	; 1
    1292:	51 05       	cpc	r21, r1
    1294:	79 f1       	breq	.+94     	; 0x12f4 <GPIO_readPin+0x96>
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	91 05       	cpc	r25, r1
    129e:	34 f4       	brge	.+12     	; 0x12ac <GPIO_readPin+0x4e>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	21 15       	cp	r18, r1
    12a6:	31 05       	cpc	r19, r1
    12a8:	69 f0       	breq	.+26     	; 0x12c4 <GPIO_readPin+0x66>
    12aa:	6b c0       	rjmp	.+214    	; 0x1382 <GPIO_readPin+0x124>
    12ac:	4c 81       	ldd	r20, Y+4	; 0x04
    12ae:	5d 81       	ldd	r21, Y+5	; 0x05
    12b0:	42 30       	cpi	r20, 0x02	; 2
    12b2:	51 05       	cpc	r21, r1
    12b4:	b9 f1       	breq	.+110    	; 0x1324 <GPIO_readPin+0xc6>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <GPIO_readPin+0x64>
    12c0:	49 c0       	rjmp	.+146    	; 0x1354 <GPIO_readPin+0xf6>
    12c2:	5f c0       	rjmp	.+190    	; 0x1382 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12c4:	e9 e3       	ldi	r30, 0x39	; 57
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a9 01       	movw	r20, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_readPin+0x7e>
    12d8:	55 95       	asr	r21
    12da:	47 95       	ror	r20
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_readPin+0x7a>
    12e0:	ca 01       	movw	r24, r20
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	90 70       	andi	r25, 0x00	; 0
    12e6:	88 23       	and	r24, r24
    12e8:	19 f0       	breq	.+6      	; 0x12f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	49 c0       	rjmp	.+146    	; 0x1382 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	47 c0       	rjmp	.+142    	; 0x1382 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12f4:	e6 e3       	ldi	r30, 0x36	; 54
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a9 01       	movw	r20, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_readPin+0xae>
    1308:	55 95       	asr	r21
    130a:	47 95       	ror	r20
    130c:	8a 95       	dec	r24
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_readPin+0xaa>
    1310:	ca 01       	movw	r24, r20
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	88 23       	and	r24, r24
    1318:	19 f0       	breq	.+6      	; 0x1320 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	31 c0       	rjmp	.+98     	; 0x1382 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1320:	19 82       	std	Y+1, r1	; 0x01
    1322:	2f c0       	rjmp	.+94     	; 0x1382 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1324:	e3 e3       	ldi	r30, 0x33	; 51
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_readPin+0xde>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_readPin+0xda>
    1340:	ca 01       	movw	r24, r20
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	88 23       	and	r24, r24
    1348:	19 f0       	breq	.+6      	; 0x1350 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	19 c0       	rjmp	.+50     	; 0x1382 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	17 c0       	rjmp	.+46     	; 0x1382 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1354:	e0 e3       	ldi	r30, 0x30	; 48
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a9 01       	movw	r20, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_readPin+0x10e>
    1368:	55 95       	asr	r21
    136a:	47 95       	ror	r20
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_readPin+0x10a>
    1370:	ca 01       	movw	r24, r20
    1372:	81 70       	andi	r24, 0x01	; 1
    1374:	90 70       	andi	r25, 0x00	; 0
    1376:	88 23       	and	r24, r24
    1378:	19 f0       	breq	.+6      	; 0x1380 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1380:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <GPIO_setupPortDirection>:
 -> If the direction value is PORT_INPUT all pins in this port should be input pins.
 -> If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_setupPortDirection+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <GPIO_setupPortDirection+0x8>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	90 f5       	brcc	.+100    	; 0x140e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <GPIO_setupPortDirection+0x5e>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <GPIO_setupPortDirection+0x3e>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <GPIO_setupPortDirection+0x54>
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <GPIO_setupPortDirection+0x7a>
    13d2:	2b 81       	ldd	r18, Y+3	; 0x03
    13d4:	3c 81       	ldd	r19, Y+4	; 0x04
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <GPIO_setupPortDirection+0x68>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <GPIO_setupPortDirection+0x72>
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13e8:	ea e3       	ldi	r30, 0x3A	; 58
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13f2:	e7 e3       	ldi	r30, 0x37	; 55
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13fc:	e4 e3       	ldi	r30, 0x34	; 52
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
    1404:	04 c0       	rjmp	.+8      	; 0x140e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1406:	e1 e3       	ldi	r30, 0x31	; 49
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	80 83       	st	Z, r24
			break;
		}
	}
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <GPIO_writePort>:
 -> If any pin in the port is output pin the value will be written.
 -> If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_writePort+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_writePort+0x8>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	90 f5       	brcc	.+100    	; 0x1496 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	d1 f0       	breq	.+52     	; 0x147a <GPIO_writePort+0x5e>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <GPIO_writePort+0x3e>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 f0       	breq	.+24     	; 0x1470 <GPIO_writePort+0x54>
    1458:	1e c0       	rjmp	.+60     	; 0x1496 <GPIO_writePort+0x7a>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <GPIO_writePort+0x68>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <GPIO_writePort+0x72>
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1470:	eb e3       	ldi	r30, 0x3B	; 59
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
			break;
		}
	}
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <GPIO_readPort>:
 * Description :
 -> Read and return the value of the required port.
 -> If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_readPort+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <GPIO_readPort+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14b2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	90 f5       	brcc	.+100    	; 0x151e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	2b 83       	std	Y+3, r18	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <GPIO_readPort+0x5e>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <GPIO_readPort+0x3e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f0       	breq	.+24     	; 0x14f8 <GPIO_readPort+0x54>
    14e0:	1e c0       	rjmp	.+60     	; 0x151e <GPIO_readPort+0x7a>
    14e2:	2b 81       	ldd	r18, Y+3	; 0x03
    14e4:	3c 81       	ldd	r19, Y+4	; 0x04
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <GPIO_readPort+0x68>
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <GPIO_readPort+0x72>
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14f8:	e9 e3       	ldi	r30, 0x39	; 57
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	0e c0       	rjmp	.+28     	; 0x151e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1502:	e6 e3       	ldi	r30, 0x36	; 54
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	09 c0       	rjmp	.+18     	; 0x151e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    150c:	e3 e3       	ldi	r30, 0x33	; 51
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	04 c0       	rjmp	.+8      	; 0x151e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1516:	e0 e3       	ldi	r30, 0x30	; 48
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <LCD_init>:
 -> Initialize the LCD:
  	  1. Setup the LCD pins directions by use the GPIO driver.
  	  2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	2e 97       	sbiw	r28, 0x0e	; 14
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	66 e0       	ldi	r22, 0x06	; 6
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	67 e0       	ldi	r22, 0x07	; 7
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 ea       	ldi	r26, 0xA0	; 160
    155c:	b1 e4       	ldi	r27, 0x41	; 65
    155e:	8b 87       	std	Y+11, r24	; 0x0b
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	ad 87       	std	Y+13, r26	; 0x0d
    1564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4a ef       	ldi	r20, 0xFA	; 250
    1574:	54 e4       	ldi	r21, 0x44	; 68
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	a9 87       	std	Y+9, r26	; 0x09
    1584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	2c f4       	brge	.+10     	; 0x15a8 <LCD_init+0x7a>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <LCD_init+0xf8>
	else if (__tmp > 65535)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	4c f5       	brge	.+82     	; 0x1612 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <LCD_init+0xda>
    15ea:	88 ec       	ldi	r24, 0xC8	; 200
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <LCD_init+0xc8>
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f7       	brne	.-38     	; 0x15ea <LCD_init+0xbc>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <LCD_init+0x104>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	6f ef       	ldi	r22, 0xFF	; 255
    163e:	0e 94 ca 09 	call	0x1394	; 0x1394 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1642:	88 e3       	ldi	r24, 0x38	; 56
    1644:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1648:	8c e0       	ldi	r24, 0x0C	; 12
    164a:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
}
    1654:	2e 96       	adiw	r28, 0x0e	; 14
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <LCD_sendCommand>:
/*
 * Description :
 -> Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	e9 97       	sbiw	r28, 0x39	; 57
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	66 e0       	ldi	r22, 0x06	; 6
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e8       	ldi	r26, 0x80	; 128
    168c:	bf e3       	ldi	r27, 0x3F	; 63
    168e:	8d ab       	std	Y+53, r24	; 0x35
    1690:	9e ab       	std	Y+54, r25	; 0x36
    1692:	af ab       	std	Y+55, r26	; 0x37
    1694:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	6d a9       	ldd	r22, Y+53	; 0x35
    1698:	7e a9       	ldd	r23, Y+54	; 0x36
    169a:	8f a9       	ldd	r24, Y+55	; 0x37
    169c:	98 ad       	ldd	r25, Y+56	; 0x38
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	89 ab       	std	Y+49, r24	; 0x31
    16b0:	9a ab       	std	Y+50, r25	; 0x32
    16b2:	ab ab       	std	Y+51, r26	; 0x33
    16b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b6:	69 a9       	ldd	r22, Y+49	; 0x31
    16b8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ba:	8b a9       	ldd	r24, Y+51	; 0x33
    16bc:	9c a9       	ldd	r25, Y+52	; 0x34
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <LCD_sendCommand+0x72>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16d8:	69 a9       	ldd	r22, Y+49	; 0x31
    16da:	7a a9       	ldd	r23, Y+50	; 0x32
    16dc:	8b a9       	ldd	r24, Y+51	; 0x33
    16de:	9c a9       	ldd	r25, Y+52	; 0x34
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	6d a9       	ldd	r22, Y+53	; 0x35
    16f2:	7e a9       	ldd	r23, Y+54	; 0x36
    16f4:	8f a9       	ldd	r24, Y+55	; 0x37
    16f6:	98 ad       	ldd	r25, Y+56	; 0x38
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	98 ab       	std	Y+48, r25	; 0x30
    1716:	8f a7       	std	Y+47, r24	; 0x2f
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <LCD_sendCommand+0xd2>
    171a:	88 ec       	ldi	r24, 0xC8	; 200
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e a7       	std	Y+46, r25	; 0x2e
    1720:	8d a7       	std	Y+45, r24	; 0x2d
    1722:	8d a5       	ldd	r24, Y+45	; 0x2d
    1724:	9e a5       	ldd	r25, Y+46	; 0x2e
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_sendCommand+0xc0>
    172a:	9e a7       	std	Y+46, r25	; 0x2e
    172c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	98 a9       	ldd	r25, Y+48	; 0x30
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	98 ab       	std	Y+48, r25	; 0x30
    1736:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8f a5       	ldd	r24, Y+47	; 0x2f
    173a:	98 a9       	ldd	r25, Y+48	; 0x30
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <LCD_sendCommand+0xb4>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	69 a9       	ldd	r22, Y+49	; 0x31
    1744:	7a a9       	ldd	r23, Y+50	; 0x32
    1746:	8b a9       	ldd	r24, Y+51	; 0x33
    1748:	9c a9       	ldd	r25, Y+52	; 0x34
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	98 ab       	std	Y+48, r25	; 0x30
    1754:	8f a7       	std	Y+47, r24	; 0x2f
    1756:	8f a5       	ldd	r24, Y+47	; 0x2f
    1758:	98 a9       	ldd	r25, Y+48	; 0x30
    175a:	9c a7       	std	Y+44, r25	; 0x2c
    175c:	8b a7       	std	Y+43, r24	; 0x2b
    175e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1760:	9c a5       	ldd	r25, Y+44	; 0x2c
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_sendCommand+0xfc>
    1766:	9c a7       	std	Y+44, r25	; 0x2c
    1768:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	67 e0       	ldi	r22, 0x07	; 7
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e8       	ldi	r26, 0x80	; 128
    177a:	bf e3       	ldi	r27, 0x3F	; 63
    177c:	8f a3       	std	Y+39, r24	; 0x27
    177e:	98 a7       	std	Y+40, r25	; 0x28
    1780:	a9 a7       	std	Y+41, r26	; 0x29
    1782:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	6f a1       	ldd	r22, Y+39	; 0x27
    1786:	78 a5       	ldd	r23, Y+40	; 0x28
    1788:	89 a5       	ldd	r24, Y+41	; 0x29
    178a:	9a a5       	ldd	r25, Y+42	; 0x2a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8b a3       	std	Y+35, r24	; 0x23
    179e:	9c a3       	std	Y+36, r25	; 0x24
    17a0:	ad a3       	std	Y+37, r26	; 0x25
    17a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a4:	6b a1       	ldd	r22, Y+35	; 0x23
    17a6:	7c a1       	ldd	r23, Y+36	; 0x24
    17a8:	8d a1       	ldd	r24, Y+37	; 0x25
    17aa:	9e a1       	ldd	r25, Y+38	; 0x26
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_sendCommand+0x160>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17c6:	6b a1       	ldd	r22, Y+35	; 0x23
    17c8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ca:	8d a1       	ldd	r24, Y+37	; 0x25
    17cc:	9e a1       	ldd	r25, Y+38	; 0x26
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	6f a1       	ldd	r22, Y+39	; 0x27
    17e0:	78 a5       	ldd	r23, Y+40	; 0x28
    17e2:	89 a5       	ldd	r24, Y+41	; 0x29
    17e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9a a3       	std	Y+34, r25	; 0x22
    1804:	89 a3       	std	Y+33, r24	; 0x21
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <LCD_sendCommand+0x1c0>
    1808:	88 ec       	ldi	r24, 0xC8	; 200
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	98 a3       	std	Y+32, r25	; 0x20
    180e:	8f 8f       	std	Y+31, r24	; 0x1f
    1810:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1812:	98 a1       	ldd	r25, Y+32	; 0x20
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_sendCommand+0x1ae>
    1818:	98 a3       	std	Y+32, r25	; 0x20
    181a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	89 a1       	ldd	r24, Y+33	; 0x21
    181e:	9a a1       	ldd	r25, Y+34	; 0x22
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9a a3       	std	Y+34, r25	; 0x22
    1824:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	89 a1       	ldd	r24, Y+33	; 0x21
    1828:	9a a1       	ldd	r25, Y+34	; 0x22
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <LCD_sendCommand+0x1a2>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9a a3       	std	Y+34, r25	; 0x22
    1842:	89 a3       	std	Y+33, r24	; 0x21
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	9e 8f       	std	Y+30, r25	; 0x1e
    184a:	8d 8f       	std	Y+29, r24	; 0x1d
    184c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_sendCommand+0x1ea>
    1854:	9e 8f       	std	Y+30, r25	; 0x1e
    1856:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	69 ad       	ldd	r22, Y+57	; 0x39
    185c:	0e 94 0e 0a 	call	0x141c	; 0x141c <GPIO_writePort>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	89 8f       	std	Y+25, r24	; 0x19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	ab 8f       	std	Y+27, r26	; 0x1b
    186e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8d 8b       	std	Y+21, r24	; 0x15
    188a:	9e 8b       	std	Y+22, r25	; 0x16
    188c:	af 8b       	std	Y+23, r26	; 0x17
    188e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	69 8d       	ldd	r22, Y+25	; 0x19
    18cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_sendCommand+0x2ac>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_sendCommand+0x29a>
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_sendCommand+0x28e>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 89       	ldd	r25, Y+16	; 0x10
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_sendCommand+0x2d6>
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	67 e0       	ldi	r22, 0x07	; 7
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	bf e3       	ldi	r27, 0x3F	; 63
    1956:	8b 87       	std	Y+11, r24	; 0x0b
    1958:	9c 87       	std	Y+12, r25	; 0x0c
    195a:	ad 87       	std	Y+13, r26	; 0x0d
    195c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a ef       	ldi	r20, 0xFA	; 250
    196c:	54 e4       	ldi	r21, 0x44	; 68
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8f 83       	std	Y+7, r24	; 0x07
    1978:	98 87       	std	Y+8, r25	; 0x08
    197a:	a9 87       	std	Y+9, r26	; 0x09
    197c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	3f c0       	rjmp	.+126    	; 0x1a1e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	4c f5       	brge	.+82     	; 0x1a0a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    19bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19be:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <LCD_sendCommand+0x39a>
    19e2:	88 ec       	ldi	r24, 0xC8	; 200
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_sendCommand+0x388>
    19f2:	9c 83       	std	Y+4, r25	; 0x04
    19f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	69 f7       	brne	.-38     	; 0x19e2 <LCD_sendCommand+0x37c>
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_sendCommand+0x3c4>
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a32:	e9 96       	adiw	r28, 0x39	; 57
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <LCD_displayCharacter>:
/*
 * Description :
 -> Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	e9 97       	sbiw	r28, 0x39	; 57
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	66 e0       	ldi	r22, 0x06	; 6
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	8d ab       	std	Y+53, r24	; 0x35
    1a6e:	9e ab       	std	Y+54, r25	; 0x36
    1a70:	af ab       	std	Y+55, r26	; 0x37
    1a72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	6d a9       	ldd	r22, Y+53	; 0x35
    1a76:	7e a9       	ldd	r23, Y+54	; 0x36
    1a78:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a ef       	ldi	r20, 0xFA	; 250
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	89 ab       	std	Y+49, r24	; 0x31
    1a8e:	9a ab       	std	Y+50, r25	; 0x32
    1a90:	ab ab       	std	Y+51, r26	; 0x33
    1a92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a94:	69 a9       	ldd	r22, Y+49	; 0x31
    1a96:	7a a9       	ldd	r23, Y+50	; 0x32
    1a98:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	98 ab       	std	Y+48, r25	; 0x30
    1ab2:	8f a7       	std	Y+47, r24	; 0x2f
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ab6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aba:	8b a9       	ldd	r24, Y+51	; 0x33
    1abc:	9c a9       	ldd	r25, Y+52	; 0x34
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	98 ab       	std	Y+48, r25	; 0x30
    1af4:	8f a7       	std	Y+47, r24	; 0x2f
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <LCD_displayCharacter+0xd2>
    1af8:	88 ec       	ldi	r24, 0xC8	; 200
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e a7       	std	Y+46, r25	; 0x2e
    1afe:	8d a7       	std	Y+45, r24	; 0x2d
    1b00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_displayCharacter+0xc0>
    1b08:	9e a7       	std	Y+46, r25	; 0x2e
    1b0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	98 ab       	std	Y+48, r25	; 0x30
    1b14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b18:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <LCD_displayCharacter+0xb4>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b36:	98 a9       	ldd	r25, Y+48	; 0x30
    1b38:	9c a7       	std	Y+44, r25	; 0x2c
    1b3a:	8b a7       	std	Y+43, r24	; 0x2b
    1b3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_displayCharacter+0xfc>
    1b44:	9c a7       	std	Y+44, r25	; 0x2c
    1b46:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	67 e0       	ldi	r22, 0x07	; 7
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e8       	ldi	r26, 0x80	; 128
    1b58:	bf e3       	ldi	r27, 0x3F	; 63
    1b5a:	8f a3       	std	Y+39, r24	; 0x27
    1b5c:	98 a7       	std	Y+40, r25	; 0x28
    1b5e:	a9 a7       	std	Y+41, r26	; 0x29
    1b60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6f a1       	ldd	r22, Y+39	; 0x27
    1b64:	78 a5       	ldd	r23, Y+40	; 0x28
    1b66:	89 a5       	ldd	r24, Y+41	; 0x29
    1b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8b a3       	std	Y+35, r24	; 0x23
    1b7c:	9c a3       	std	Y+36, r25	; 0x24
    1b7e:	ad a3       	std	Y+37, r26	; 0x25
    1b80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b82:	6b a1       	ldd	r22, Y+35	; 0x23
    1b84:	7c a1       	ldd	r23, Y+36	; 0x24
    1b86:	8d a1       	ldd	r24, Y+37	; 0x25
    1b88:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9a a3       	std	Y+34, r25	; 0x22
    1ba0:	89 a3       	std	Y+33, r24	; 0x21
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    1baa:	9e a1       	ldd	r25, Y+38	; 0x26
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9a a3       	std	Y+34, r25	; 0x22
    1be2:	89 a3       	std	Y+33, r24	; 0x21
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_displayCharacter+0x1c0>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	98 a3       	std	Y+32, r25	; 0x20
    1bec:	8f 8f       	std	Y+31, r24	; 0x1f
    1bee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_displayCharacter+0x1ae>
    1bf6:	98 a3       	std	Y+32, r25	; 0x20
    1bf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9a a3       	std	Y+34, r25	; 0x22
    1c02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	89 a1       	ldd	r24, Y+33	; 0x21
    1c06:	9a a1       	ldd	r25, Y+34	; 0x22
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <LCD_displayCharacter+0x1a2>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c10:	7c a1       	ldd	r23, Y+36	; 0x24
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	9e 8f       	std	Y+30, r25	; 0x1e
    1c28:	8d 8f       	std	Y+29, r24	; 0x1d
    1c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_displayCharacter+0x1ea>
    1c32:	9e 8f       	std	Y+30, r25	; 0x1e
    1c34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	69 ad       	ldd	r22, Y+57	; 0x39
    1c3a:	0e 94 0e 0a 	call	0x141c	; 0x141c <GPIO_writePort>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e8       	ldi	r26, 0x80	; 128
    1c44:	bf e3       	ldi	r27, 0x3F	; 63
    1c46:	89 8f       	std	Y+25, r24	; 0x19
    1c48:	9a 8f       	std	Y+26, r25	; 0x1a
    1c4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8d 8b       	std	Y+21, r24	; 0x15
    1c68:	9e 8b       	std	Y+22, r25	; 0x16
    1c6a:	af 8b       	std	Y+23, r26	; 0x17
    1c6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c70:	7e 89       	ldd	r23, Y+22	; 0x16
    1c72:	8f 89       	ldd	r24, Y+23	; 0x17
    1c74:	98 8d       	ldd	r25, Y+24	; 0x18
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c90:	6d 89       	ldd	r22, Y+21	; 0x15
    1c92:	7e 89       	ldd	r23, Y+22	; 0x16
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    1caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_displayCharacter+0x2ac>
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9a 8b       	std	Y+18, r25	; 0x12
    1cd8:	89 8b       	std	Y+17, r24	; 0x11
    1cda:	89 89       	ldd	r24, Y+17	; 0x11
    1cdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_displayCharacter+0x29a>
    1ce2:	9a 8b       	std	Y+18, r25	; 0x12
    1ce4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9c 8b       	std	Y+20, r25	; 0x14
    1cee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_displayCharacter+0x28e>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	98 8b       	std	Y+16, r25	; 0x10
    1d14:	8f 87       	std	Y+15, r24	; 0x0f
    1d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d18:	98 89       	ldd	r25, Y+16	; 0x10
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_displayCharacter+0x2d6>
    1d1e:	98 8b       	std	Y+16, r25	; 0x10
    1d20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	67 e0       	ldi	r22, 0x07	; 7
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e8       	ldi	r26, 0x80	; 128
    1d32:	bf e3       	ldi	r27, 0x3F	; 63
    1d34:	8b 87       	std	Y+11, r24	; 0x0b
    1d36:	9c 87       	std	Y+12, r25	; 0x0c
    1d38:	ad 87       	std	Y+13, r26	; 0x0d
    1d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f 83       	std	Y+7, r24	; 0x07
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	a9 87       	std	Y+9, r26	; 0x09
    1d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <LCD_displayCharacter+0x39a>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_displayCharacter+0x388>
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <LCD_displayCharacter+0x37c>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_displayCharacter+0x3c4>
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e10:	e9 96       	adiw	r28, 0x39	; 57
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <LCD_displayString>:
/*
 * Description :
 -> Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <LCD_displayString+0x6>
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9b 83       	std	Y+3, r25	; 0x03
    1e30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e32:	19 82       	std	Y+1, r1	; 0x01
    1e34:	0e c0       	rjmp	.+28     	; 0x1e52 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	fc 01       	movw	r30, r24
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	80 81       	ld	r24, Z
    1e48:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_displayCharacter>
		i++;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	89 83       	std	Y+1, r24	; 0x01
 -> Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	39 f7       	brne	.-50     	; 0x1e36 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <LCD_moveCursor>:
/*
 * Description :
 -> Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <LCD_moveCursor+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <LCD_moveCursor+0x8>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	3d 83       	std	Y+5, r19	; 0x05
    1e8e:	2c 83       	std	Y+4, r18	; 0x04
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	91 05       	cpc	r25, r1
    1e98:	c1 f0       	breq	.+48     	; 0x1eca <LCD_moveCursor+0x56>
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_moveCursor+0x3a>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <LCD_moveCursor+0x50>
    1eac:	19 c0       	rjmp	.+50     	; 0x1ee0 <LCD_moveCursor+0x6c>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <LCD_moveCursor+0x5e>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	61 f0       	breq	.+24     	; 0x1eda <LCD_moveCursor+0x66>
    1ec2:	0e c0       	rjmp	.+28     	; 0x1ee0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	80 5c       	subi	r24, 0xC0	; 192
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	80 5f       	subi	r24, 0xF0	; 240
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	80 5b       	subi	r24, 0xB0	; 176
    1ede:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <LCD_displayStringRowColumn>:
/*
 * Description :
 -> Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <LCD_displayStringRowColumn+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <LCD_displayStringRowColumn+0x8>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
    1f08:	5c 83       	std	Y+4, r21	; 0x04
    1f0a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f10:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_clearScreen>:
/*
 * Description :
 -> Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <LCD_intgerToString>:
/*
 * Description :
 -> Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	62 97       	sbiw	r28, 0x12	; 18
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	9a 8b       	std	Y+18, r25	; 0x12
    1f54:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f56:	89 89       	ldd	r24, Y+17	; 0x11
    1f58:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5a:	9e 01       	movw	r18, r28
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	b9 01       	movw	r22, r18
    1f62:	4a e0       	ldi	r20, 0x0A	; 10
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	0e 94 0d 1c 	call	0x381a	; 0x381a <itoa>
   LCD_displayString(buff); /* Display the string */
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
}
    1f72:	62 96       	adiw	r28, 0x12	; 18
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_clearRow>:

/*
 * Description :
 -> Clear specific row
 */
void LCD_clearRow(uint8 row){
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(row,0,"                ");
    1f90:	20 e6       	ldi	r18, 0x60	; 96
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	a9 01       	movw	r20, r18
    1f9a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>
}
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_StoreCustomPtrn>:
/*
 * Description :
 -> Storing the pattern of custom character on the CGRAM.
 -> The function take the pattern and the index you need to store in.
 */
void LCD_StoreCustomPtrn(uint8 *Pattern , uint8 CGRAM_index){
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <LCD_StoreCustomPtrn+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <LCD_StoreCustomPtrn+0x8>
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	6d 83       	std	Y+5, r22	; 0x05
	uint8 LCD_CGRAM_address , indx ;
	if(CGRAM_index < 8){
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	88 30       	cpi	r24, 0x08	; 8
    1fbe:	20 f5       	brcc	.+72     	; 0x2008 <LCD_StoreCustomPtrn+0x62>
		LCD_CGRAM_address = CGRAM_index * 8;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
		LCD_sendCommand(LCD_CGRAM_address | LCD_SET_CGRAM_ADDRESS);
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	80 64       	ori	r24, 0x40	; 64
    1fd8:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
		for( indx = 0 ; indx < 8 ; indx++){
    1fdc:	19 82       	std	Y+1, r1	; 0x01
    1fde:	0e c0       	rjmp	.+28     	; 0x1ffc <LCD_StoreCustomPtrn+0x56>
			LCD_displayCharacter(Pattern[indx]);
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 0f       	add	r30, r18
    1fee:	f3 1f       	adc	r31, r19
    1ff0:	80 81       	ld	r24, Z
    1ff2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_displayCharacter>
void LCD_StoreCustomPtrn(uint8 *Pattern , uint8 CGRAM_index){
	uint8 LCD_CGRAM_address , indx ;
	if(CGRAM_index < 8){
		LCD_CGRAM_address = CGRAM_index * 8;
		LCD_sendCommand(LCD_CGRAM_address | LCD_SET_CGRAM_ADDRESS);
		for( indx = 0 ; indx < 8 ; indx++){
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 30       	cpi	r24, 0x08	; 8
    2000:	78 f3       	brcs	.-34     	; 0x1fe0 <LCD_StoreCustomPtrn+0x3a>
			LCD_displayCharacter(Pattern[indx]);
		}
		LCD_sendCommand(LCD_GO_TO_HOME);
    2002:	80 e8       	ldi	r24, 0x80	; 128
    2004:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_sendCommand>
	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <LCD_DisplayCustomPtrn>:
/*
 * Description :
 -> Showing the pattern of custom character on specific index in CGRAM.
 -> The function take the index in CGRAM and the row and the column to display at.
 */
void LCD_DisplayCustomPtrn(uint8 CGRAM_index , uint8 row , uint8 col){
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <LCD_DisplayCustomPtrn+0x6>
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	6a 83       	std	Y+2, r22	; 0x02
    2028:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row , col);
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	6b 81       	ldd	r22, Y+3	; 0x03
    202e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
	LCD_displayCharacter(CGRAM_index);
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_displayCharacter>
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <KEYPAD_getPressedKey>:
 |                               Functions Definitions                          |
 |______________________________________________________________________________|
 */

uint8 KEYPAD_getPressedKey(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	60 97       	sbiw	r28, 0x10	; 16
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	62 e0       	ldi	r22, 0x02	; 2
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	63 e0       	ldi	r22, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	64 e0       	ldi	r22, 0x04	; 4
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	65 e0       	ldi	r22, 0x05	; 5
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	66 e0       	ldi	r22, 0x06	; 6
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	67 e0       	ldi	r22, 0x07	; 7
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20a8:	1f 86       	std	Y+15, r1	; 0x0f
    20aa:	af c0       	rjmp	.+350    	; 0x220a <KEYPAD_getPressedKey+0x1c6>
		{
			/* 
			 -> Each time setup the direction for all keypad port as input pins,
			    except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20c0:	18 8a       	std	Y+16, r1	; 0x10
    20c2:	26 c0       	rjmp	.+76     	; 0x2110 <KEYPAD_getPressedKey+0xcc>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    20c4:	88 89       	ldd	r24, Y+16	; 0x10
    20c6:	98 2f       	mov	r25, r24
    20c8:	9c 5f       	subi	r25, 0xFC	; 252
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	69 2f       	mov	r22, r25
    20ce:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_readPin>
    20d2:	88 23       	and	r24, r24
    20d4:	d1 f4       	brne	.+52     	; 0x210a <KEYPAD_getPressedKey+0xc6>
				{
					return KEYPAD_Buttons_Arr [row][col];
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	48 2f       	mov	r20, r24
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	88 89       	ldd	r24, Y+16	; 0x10
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	ca 01       	movw	r24, r20
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	fc 01       	movw	r30, r24
    20f2:	eb 5a       	subi	r30, 0xAB	; 171
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	80 81       	ld	r24, Z
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    20f8:	60 96       	adiw	r28, 0x10	; 16
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    210a:	88 89       	ldd	r24, Y+16	; 0x10
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	88 8b       	std	Y+16, r24	; 0x10
    2110:	88 89       	ldd	r24, Y+16	; 0x10
    2112:	84 30       	cpi	r24, 0x04	; 4
    2114:	b8 f2       	brcs	.-82     	; 0x20c4 <KEYPAD_getPressedKey+0x80>
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					return KEYPAD_Buttons_Arr [row][col];
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	6f 85       	ldd	r22, Y+15	; 0x0f
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_setupPinDirection>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 ea       	ldi	r26, 0xA0	; 160
    2126:	b0 e4       	ldi	r27, 0x40	; 64
    2128:	8b 87       	std	Y+11, r24	; 0x0b
    212a:	9c 87       	std	Y+12, r25	; 0x0c
    212c:	ad 87       	std	Y+13, r26	; 0x0d
    212e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6b 85       	ldd	r22, Y+11	; 0x0b
    2132:	7c 85       	ldd	r23, Y+12	; 0x0c
    2134:	8d 85       	ldd	r24, Y+13	; 0x0d
    2136:	9e 85       	ldd	r25, Y+14	; 0x0e
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8f 83       	std	Y+7, r24	; 0x07
    214a:	98 87       	std	Y+8, r25	; 0x08
    214c:	a9 87       	std	Y+9, r26	; 0x09
    214e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <KEYPAD_getPressedKey+0x12e>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <KEYPAD_getPressedKey+0x1ac>
	else if (__tmp > 65535)
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <KEYPAD_getPressedKey+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <KEYPAD_getPressedKey+0x18e>
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <KEYPAD_getPressedKey+0x17c>
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <KEYPAD_getPressedKey+0x170>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <KEYPAD_getPressedKey+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <KEYPAD_getPressedKey+0x1b8>
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2204:	8f 85       	ldd	r24, Y+15	; 0x0f
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	8f 87       	std	Y+15, r24	; 0x0f
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	08 f4       	brcc	.+2      	; 0x2212 <KEYPAD_getPressedKey+0x1ce>
    2210:	4d cf       	rjmp	.-358    	; 0x20ac <KEYPAD_getPressedKey+0x68>
    2212:	4a cf       	rjmp	.-364    	; 0x20a8 <KEYPAD_getPressedKey+0x64>

00002214 <main>:

/*______________________________________________________________________________
 |                       		  Main Function                       		    |
 |______________________________________________________________________________|
 */
int main (void){
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	cc 59       	subi	r28, 0x9C	; 156
    2222:	d0 40       	sbci	r29, 0x00	; 0
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61

	uint8 NumberOfTries = 0 ;	/* to count the no of wrong passwords will be entered */
    222e:	fe 01       	movw	r30, r28
    2230:	ee 57       	subi	r30, 0x7E	; 126
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	10 82       	st	Z, r1
	uint8 PasswordCorrectnessFlag = 0 ;	/* This flag is true when a correct password is entered */
    2236:	fe 01       	movw	r30, r28
    2238:	ef 57       	subi	r30, 0x7F	; 127
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	10 82       	st	Z, r1
	/* This flag is true if the two password which user enters equal each other while creating new password */
	uint8 PasswordsMatchingFlag = 1 ;
    223e:	fe 01       	movw	r30, r28
    2240:	e0 58       	subi	r30, 0x80	; 128
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	80 83       	st	Z, r24
	uint8 PasswordSetFlag = 0;	/* This flag is true when the password is successfully created */
    2248:	fe 01       	movw	r30, r28
    224a:	e1 58       	subi	r30, 0x81	; 129
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	10 82       	st	Z, r1
	uint8 LCD_LockerPattern[] = { 0x0E, 0x11, 0x11, 0x1F, 0x1B, 0x1B, 0x1F };
    2250:	ce 01       	movw	r24, r28
    2252:	8d 57       	subi	r24, 0x7D	; 125
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	cd 56       	subi	r28, 0x6D	; 109
    2258:	df 4f       	sbci	r29, 0xFF	; 255
    225a:	99 83       	std	Y+1, r25	; 0x01
    225c:	88 83       	st	Y, r24
    225e:	c3 59       	subi	r28, 0x93	; 147
    2260:	d0 40       	sbci	r29, 0x00	; 0
    2262:	22 e7       	ldi	r18, 0x72	; 114
    2264:	31 e0       	ldi	r19, 0x01	; 1
    2266:	cb 56       	subi	r28, 0x6B	; 107
    2268:	df 4f       	sbci	r29, 0xFF	; 255
    226a:	39 83       	std	Y+1, r19	; 0x01
    226c:	28 83       	st	Y, r18
    226e:	c5 59       	subi	r28, 0x95	; 149
    2270:	d0 40       	sbci	r29, 0x00	; 0
    2272:	37 e0       	ldi	r19, 0x07	; 7
    2274:	c9 56       	subi	r28, 0x69	; 105
    2276:	df 4f       	sbci	r29, 0xFF	; 255
    2278:	38 83       	st	Y, r19
    227a:	c7 59       	subi	r28, 0x97	; 151
    227c:	d0 40       	sbci	r29, 0x00	; 0
    227e:	cb 56       	subi	r28, 0x6B	; 107
    2280:	df 4f       	sbci	r29, 0xFF	; 255
    2282:	e8 81       	ld	r30, Y
    2284:	f9 81       	ldd	r31, Y+1	; 0x01
    2286:	c5 59       	subi	r28, 0x95	; 149
    2288:	d0 40       	sbci	r29, 0x00	; 0
    228a:	00 80       	ld	r0, Z
    228c:	cb 56       	subi	r28, 0x6B	; 107
    228e:	df 4f       	sbci	r29, 0xFF	; 255
    2290:	28 81       	ld	r18, Y
    2292:	39 81       	ldd	r19, Y+1	; 0x01
    2294:	c5 59       	subi	r28, 0x95	; 149
    2296:	d0 40       	sbci	r29, 0x00	; 0
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	cb 56       	subi	r28, 0x6B	; 107
    229e:	df 4f       	sbci	r29, 0xFF	; 255
    22a0:	39 83       	std	Y+1, r19	; 0x01
    22a2:	28 83       	st	Y, r18
    22a4:	c5 59       	subi	r28, 0x95	; 149
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	cd 56       	subi	r28, 0x6D	; 109
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	e8 81       	ld	r30, Y
    22ae:	f9 81       	ldd	r31, Y+1	; 0x01
    22b0:	c3 59       	subi	r28, 0x93	; 147
    22b2:	d0 40       	sbci	r29, 0x00	; 0
    22b4:	00 82       	st	Z, r0
    22b6:	cd 56       	subi	r28, 0x6D	; 109
    22b8:	df 4f       	sbci	r29, 0xFF	; 255
    22ba:	28 81       	ld	r18, Y
    22bc:	39 81       	ldd	r19, Y+1	; 0x01
    22be:	c3 59       	subi	r28, 0x93	; 147
    22c0:	d0 40       	sbci	r29, 0x00	; 0
    22c2:	2f 5f       	subi	r18, 0xFF	; 255
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	cd 56       	subi	r28, 0x6D	; 109
    22c8:	df 4f       	sbci	r29, 0xFF	; 255
    22ca:	39 83       	std	Y+1, r19	; 0x01
    22cc:	28 83       	st	Y, r18
    22ce:	c3 59       	subi	r28, 0x93	; 147
    22d0:	d0 40       	sbci	r29, 0x00	; 0
    22d2:	c9 56       	subi	r28, 0x69	; 105
    22d4:	df 4f       	sbci	r29, 0xFF	; 255
    22d6:	38 81       	ld	r19, Y
    22d8:	c7 59       	subi	r28, 0x97	; 151
    22da:	d0 40       	sbci	r29, 0x00	; 0
    22dc:	31 50       	subi	r19, 0x01	; 1
    22de:	c9 56       	subi	r28, 0x69	; 105
    22e0:	df 4f       	sbci	r29, 0xFF	; 255
    22e2:	38 83       	st	Y, r19
    22e4:	c7 59       	subi	r28, 0x97	; 151
    22e6:	d0 40       	sbci	r29, 0x00	; 0
    22e8:	c9 56       	subi	r28, 0x69	; 105
    22ea:	df 4f       	sbci	r29, 0xFF	; 255
    22ec:	88 81       	ld	r24, Y
    22ee:	c7 59       	subi	r28, 0x97	; 151
    22f0:	d0 40       	sbci	r29, 0x00	; 0
    22f2:	88 23       	and	r24, r24
    22f4:	21 f6       	brne	.-120    	; 0x227e <main+0x6a>
	/* The configuration structure of the UART protocol */
	UART_ConfigType USART_MyConfig = {EIGHT_BIT_MODE , DISABLED_PARITY , ONE_STOP_BIT , 9600};
    22f6:	ce 01       	movw	r24, r28
    22f8:	86 57       	subi	r24, 0x76	; 118
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	c8 56       	subi	r28, 0x68	; 104
    22fe:	df 4f       	sbci	r29, 0xFF	; 255
    2300:	99 83       	std	Y+1, r25	; 0x01
    2302:	88 83       	st	Y, r24
    2304:	c8 59       	subi	r28, 0x98	; 152
    2306:	d0 40       	sbci	r29, 0x00	; 0
    2308:	eb e6       	ldi	r30, 0x6B	; 107
    230a:	f1 e0       	ldi	r31, 0x01	; 1
    230c:	c6 56       	subi	r28, 0x66	; 102
    230e:	df 4f       	sbci	r29, 0xFF	; 255
    2310:	f9 83       	std	Y+1, r31	; 0x01
    2312:	e8 83       	st	Y, r30
    2314:	ca 59       	subi	r28, 0x9A	; 154
    2316:	d0 40       	sbci	r29, 0x00	; 0
    2318:	f7 e0       	ldi	r31, 0x07	; 7
    231a:	c4 56       	subi	r28, 0x64	; 100
    231c:	df 4f       	sbci	r29, 0xFF	; 255
    231e:	f8 83       	st	Y, r31
    2320:	cc 59       	subi	r28, 0x9C	; 156
    2322:	d0 40       	sbci	r29, 0x00	; 0
    2324:	c6 56       	subi	r28, 0x66	; 102
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	e8 81       	ld	r30, Y
    232a:	f9 81       	ldd	r31, Y+1	; 0x01
    232c:	ca 59       	subi	r28, 0x9A	; 154
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	00 80       	ld	r0, Z
    2332:	c6 56       	subi	r28, 0x66	; 102
    2334:	df 4f       	sbci	r29, 0xFF	; 255
    2336:	28 81       	ld	r18, Y
    2338:	39 81       	ldd	r19, Y+1	; 0x01
    233a:	ca 59       	subi	r28, 0x9A	; 154
    233c:	d0 40       	sbci	r29, 0x00	; 0
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	c6 56       	subi	r28, 0x66	; 102
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	39 83       	std	Y+1, r19	; 0x01
    2348:	28 83       	st	Y, r18
    234a:	ca 59       	subi	r28, 0x9A	; 154
    234c:	d0 40       	sbci	r29, 0x00	; 0
    234e:	c8 56       	subi	r28, 0x68	; 104
    2350:	df 4f       	sbci	r29, 0xFF	; 255
    2352:	e8 81       	ld	r30, Y
    2354:	f9 81       	ldd	r31, Y+1	; 0x01
    2356:	c8 59       	subi	r28, 0x98	; 152
    2358:	d0 40       	sbci	r29, 0x00	; 0
    235a:	00 82       	st	Z, r0
    235c:	c8 56       	subi	r28, 0x68	; 104
    235e:	df 4f       	sbci	r29, 0xFF	; 255
    2360:	28 81       	ld	r18, Y
    2362:	39 81       	ldd	r19, Y+1	; 0x01
    2364:	c8 59       	subi	r28, 0x98	; 152
    2366:	d0 40       	sbci	r29, 0x00	; 0
    2368:	2f 5f       	subi	r18, 0xFF	; 255
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	c8 56       	subi	r28, 0x68	; 104
    236e:	df 4f       	sbci	r29, 0xFF	; 255
    2370:	39 83       	std	Y+1, r19	; 0x01
    2372:	28 83       	st	Y, r18
    2374:	c8 59       	subi	r28, 0x98	; 152
    2376:	d0 40       	sbci	r29, 0x00	; 0
    2378:	c4 56       	subi	r28, 0x64	; 100
    237a:	df 4f       	sbci	r29, 0xFF	; 255
    237c:	38 81       	ld	r19, Y
    237e:	cc 59       	subi	r28, 0x9C	; 156
    2380:	d0 40       	sbci	r29, 0x00	; 0
    2382:	31 50       	subi	r19, 0x01	; 1
    2384:	c4 56       	subi	r28, 0x64	; 100
    2386:	df 4f       	sbci	r29, 0xFF	; 255
    2388:	38 83       	st	Y, r19
    238a:	cc 59       	subi	r28, 0x9C	; 156
    238c:	d0 40       	sbci	r29, 0x00	; 0
    238e:	c4 56       	subi	r28, 0x64	; 100
    2390:	df 4f       	sbci	r29, 0xFF	; 255
    2392:	88 81       	ld	r24, Y
    2394:	cc 59       	subi	r28, 0x9C	; 156
    2396:	d0 40       	sbci	r29, 0x00	; 0
    2398:	88 23       	and	r24, r24
    239a:	21 f6       	brne	.-120    	; 0x2324 <main+0x110>
	SREG |= 1<<7;	/* Enabling Global Interrupts Service */
    239c:	af e5       	ldi	r26, 0x5F	; 95
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ef e5       	ldi	r30, 0x5F	; 95
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	80 68       	ori	r24, 0x80	; 128
    23a8:	8c 93       	st	X, r24

	LCD_init();
    23aa:	0e 94 97 0a 	call	0x152e	; 0x152e <LCD_init>
	UART_init(&USART_MyConfig);
    23ae:	ce 01       	movw	r24, r28
    23b0:	86 57       	subi	r24, 0x76	; 118
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	Timer1_setCallBack(timer1_tick);
    23b8:	84 e5       	ldi	r24, 0x54	; 84
    23ba:	99 e1       	ldi	r25, 0x19	; 25
    23bc:	0e 94 47 07 	call	0xe8e	; 0xe8e <Timer1_setCallBack>

	LCD_StoreCustomPtrn(LCD_LockerPattern , 0);	/* Storing lock pattern at CGRAM
    23c0:	ce 01       	movw	r24, r28
    23c2:	8d 57       	subi	r24, 0x7D	; 125
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_StoreCustomPtrn>
	*/
	LCD_displayString("   DOOR LOCKER  ");
    23cc:	81 e7       	ldi	r24, 0x71	; 113
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
	LCD_moveCursor(1,0);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
	LCD_displayString("    SYSTEM      ");
    23dc:	82 e8       	ldi	r24, 0x82	; 130
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>

	LCD_DisplayCustomPtrn(0,1,11);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	4b e0       	ldi	r20, 0x0B	; 11
    23ea:	0e 94 0c 10 	call	0x2018	; 0x2018 <LCD_DisplayCustomPtrn>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e5 58       	subi	r30, 0x85	; 133
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	aa ef       	ldi	r26, 0xFA	; 250
    23fa:	b4 e4       	ldi	r27, 0x44	; 68
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	a2 83       	std	Z+2, r26	; 0x02
    2402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	8e 01       	movw	r16, r28
    2406:	09 58       	subi	r16, 0x89	; 137
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e5 58       	subi	r30, 0x85	; 133
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2432:	fe 01       	movw	r30, r28
    2434:	e9 58       	subi	r30, 0x89	; 137
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	44 f4       	brge	.+16     	; 0x2460 <main+0x24c>
		__ticks = 1;
    2450:	fe 01       	movw	r30, r28
    2452:	eb 58       	subi	r30, 0x8B	; 139
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	64 c0       	rjmp	.+200    	; 0x2528 <main+0x314>
	else if (__tmp > 65535)
    2460:	fe 01       	movw	r30, r28
    2462:	e9 58       	subi	r30, 0x89	; 137
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <main+0x26c>
    247e:	43 c0       	rjmp	.+134    	; 0x2506 <main+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	fe 01       	movw	r30, r28
    2482:	e5 58       	subi	r30, 0x85	; 133
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e 01       	movw	r16, r28
    24a0:	0b 58       	subi	r16, 0x8B	; 139
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	1f c0       	rjmp	.+62     	; 0x24f6 <main+0x2e2>
    24b8:	fe 01       	movw	r30, r28
    24ba:	ed 58       	subi	r30, 0x8D	; 141
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	ed 58       	subi	r30, 0x8D	; 141
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <main+0x2bc>
    24d4:	fe 01       	movw	r30, r28
    24d6:	ed 58       	subi	r30, 0x8D	; 141
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	de 01       	movw	r26, r28
    24e0:	ab 58       	subi	r26, 0x8B	; 139
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	eb 58       	subi	r30, 0x8B	; 139
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 58       	subi	r30, 0x8B	; 139
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	d1 f6       	brne	.-76     	; 0x24b8 <main+0x2a4>
    2504:	27 c0       	rjmp	.+78     	; 0x2554 <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	8e 01       	movw	r16, r28
    2508:	0b 58       	subi	r16, 0x8B	; 139
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e9 58       	subi	r30, 0x89	; 137
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	de 01       	movw	r26, r28
    252a:	af 58       	subi	r26, 0x8F	; 143
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	eb 58       	subi	r30, 0x8B	; 139
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	8d 93       	st	X+, r24
    253a:	9c 93       	st	X, r25
    253c:	fe 01       	movw	r30, r28
    253e:	ef 58       	subi	r30, 0x8F	; 143
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <main+0x332>
    254a:	fe 01       	movw	r30, r28
    254c:	ef 58       	subi	r30, 0x8F	; 143
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
	_delay_ms(2000);

	UART_sendByte(IS_PASSWORD_SET);		/* Asking Control ECU if the password was created or not? */
    2554:	8c e4       	ldi	r24, 0x4C	; 76
    2556:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

	if(UART_recieveByte() == SETTED)
    255a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    255e:	8d 34       	cpi	r24, 0x4D	; 77
    2560:	29 f4       	brne	.+10     	; 0x256c <main+0x358>
		PasswordSetFlag = 1;
    2562:	fe 01       	movw	r30, r28
    2564:	e1 58       	subi	r30, 0x81	; 129
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	80 83       	st	Z, r24

	while(1){

		if(PasswordSetFlag){			/* If the password was created */
    256c:	fe 01       	movw	r30, r28
    256e:	e1 58       	subi	r30, 0x81	; 129
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	88 23       	and	r24, r24
    2576:	09 f4       	brne	.+2      	; 0x257a <main+0x366>
    2578:	4f c4       	rjmp	.+2206   	; 0x2e18 <main+0xc04>

			NumberOfTries = 0;			/* Reseting number of tries */
    257a:	fe 01       	movw	r30, r28
    257c:	ee 57       	subi	r30, 0x7E	; 126
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	10 82       	st	Z, r1
			LCD_clearScreen();
    2582:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>

			/* Showing the menu */
			LCD_displayStringRowColumn(0,0,"+ : Open Door");
    2586:	23 e9       	ldi	r18, 0x93	; 147
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	a9 01       	movw	r20, r18
    2590:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2594:	21 ea       	ldi	r18, 0xA1	; 161
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	a9 01       	movw	r20, r18
    259e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>

			switch(KEYPAD_getPressedKey()){
    25a2:	0e 94 22 10 	call	0x2044	; 0x2044 <KEYPAD_getPressedKey>
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	cf 56       	subi	r28, 0x6F	; 111
    25ac:	df 4f       	sbci	r29, 0xFF	; 255
    25ae:	39 83       	std	Y+1, r19	; 0x01
    25b0:	28 83       	st	Y, r18
    25b2:	c1 59       	subi	r28, 0x91	; 145
    25b4:	d0 40       	sbci	r29, 0x00	; 0
    25b6:	cf 56       	subi	r28, 0x6F	; 111
    25b8:	df 4f       	sbci	r29, 0xFF	; 255
    25ba:	88 81       	ld	r24, Y
    25bc:	99 81       	ldd	r25, Y+1	; 0x01
    25be:	c1 59       	subi	r28, 0x91	; 145
    25c0:	d0 40       	sbci	r29, 0x00	; 0
    25c2:	8b 32       	cpi	r24, 0x2B	; 43
    25c4:	91 05       	cpc	r25, r1
    25c6:	59 f0       	breq	.+22     	; 0x25de <main+0x3ca>
    25c8:	cf 56       	subi	r28, 0x6F	; 111
    25ca:	df 4f       	sbci	r29, 0xFF	; 255
    25cc:	e8 81       	ld	r30, Y
    25ce:	f9 81       	ldd	r31, Y+1	; 0x01
    25d0:	c1 59       	subi	r28, 0x91	; 145
    25d2:	d0 40       	sbci	r29, 0x00	; 0
    25d4:	ed 32       	cpi	r30, 0x2D	; 45
    25d6:	f1 05       	cpc	r31, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <main+0x3c8>
    25da:	09 c2       	rjmp	.+1042   	; 0x29ee <main+0x7da>
    25dc:	c7 cf       	rjmp	.-114    	; 0x256c <main+0x358>
				/* Asking for the password while the user didn't enter correct password
				 * have remaining attempts */

				do{

					PasswordCorrectnessFlag = 0;	/* Reseting password correctness flag */
    25de:	fe 01       	movw	r30, r28
    25e0:	ef 57       	subi	r30, 0x7F	; 127
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	10 82       	st	Z, r1

					LCD_clearScreen();
    25e6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
					LCD_displayString("Enter Password:");
    25ea:	81 eb       	ldi	r24, 0xB1	; 177
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
					LCD_moveCursor(1,0);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
					LCD_displayString("     ");
    25fa:	81 ec       	ldi	r24, 0xC1	; 193
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>

					/* Getting Control ECU ready to receive the password */
					UART_sendByte(TAKE_MAIN_PASSWORD);
    2602:	86 e4       	ldi	r24, 0x46	; 70
    2604:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

					/* Taking the password from the user using keypad */
					take_password_from_user();
    2608:	0e 94 6d 1a 	call	0x34da	; 0x34da <take_password_from_user>

					/* Sending the password to Control ECU to check it */
					send_password(PasswordBuff);
    260c:	8e e7       	ldi	r24, 0x7E	; 126
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	0e 94 b5 18 	call	0x316a	; 0x316a <send_password>
    2614:	fe 01       	movw	r30, r28
    2616:	e3 59       	subi	r30, 0x93	; 147
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e7       	ldi	r26, 0x70	; 112
    2620:	b1 e4       	ldi	r27, 0x41	; 65
    2622:	80 83       	st	Z, r24
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	a2 83       	std	Z+2, r26	; 0x02
    2628:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	8e 01       	movw	r16, r28
    262c:	07 59       	subi	r16, 0x97	; 151
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	fe 01       	movw	r30, r28
    2632:	e3 59       	subi	r30, 0x93	; 147
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a ef       	ldi	r20, 0xFA	; 250
    2644:	54 e4       	ldi	r21, 0x44	; 68
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	f8 01       	movw	r30, r16
    2650:	80 83       	st	Z, r24
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	a2 83       	std	Z+2, r26	; 0x02
    2656:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2658:	fe 01       	movw	r30, r28
    265a:	e7 59       	subi	r30, 0x97	; 151
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	44 f4       	brge	.+16     	; 0x2686 <main+0x472>
		__ticks = 1;
    2676:	fe 01       	movw	r30, r28
    2678:	e9 59       	subi	r30, 0x99	; 153
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24
    2684:	64 c0       	rjmp	.+200    	; 0x274e <main+0x53a>
	else if (__tmp > 65535)
    2686:	fe 01       	movw	r30, r28
    2688:	e7 59       	subi	r30, 0x97	; 151
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	0c f0       	brlt	.+2      	; 0x26a6 <main+0x492>
    26a4:	43 c0       	rjmp	.+134    	; 0x272c <main+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	fe 01       	movw	r30, r28
    26a8:	e3 59       	subi	r30, 0x93	; 147
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8e 01       	movw	r16, r28
    26c6:	09 59       	subi	r16, 0x99	; 153
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	f8 01       	movw	r30, r16
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
    26dc:	1f c0       	rjmp	.+62     	; 0x271c <main+0x508>
    26de:	fe 01       	movw	r30, r28
    26e0:	eb 59       	subi	r30, 0x9B	; 155
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	fe 01       	movw	r30, r28
    26ee:	eb 59       	subi	r30, 0x9B	; 155
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <main+0x4e2>
    26fa:	fe 01       	movw	r30, r28
    26fc:	eb 59       	subi	r30, 0x9B	; 155
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	de 01       	movw	r26, r28
    2706:	a9 59       	subi	r26, 0x99	; 153
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e9 59       	subi	r30, 0x99	; 153
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	11 96       	adiw	r26, 0x01	; 1
    2718:	9c 93       	st	X, r25
    271a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	fe 01       	movw	r30, r28
    271e:	e9 59       	subi	r30, 0x99	; 153
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	d1 f6       	brne	.-76     	; 0x26de <main+0x4ca>
    272a:	27 c0       	rjmp	.+78     	; 0x277a <main+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	8e 01       	movw	r16, r28
    272e:	09 59       	subi	r16, 0x99	; 153
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	e7 59       	subi	r30, 0x97	; 151
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	f8 01       	movw	r30, r16
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	de 01       	movw	r26, r28
    2750:	ad 59       	subi	r26, 0x9D	; 157
    2752:	bf 4f       	sbci	r27, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	e9 59       	subi	r30, 0x99	; 153
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	8d 93       	st	X+, r24
    2760:	9c 93       	st	X, r25
    2762:	fe 01       	movw	r30, r28
    2764:	ed 59       	subi	r30, 0x9D	; 157
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <main+0x558>
    2770:	fe 01       	movw	r30, r28
    2772:	ed 59       	subi	r30, 0x9D	; 157
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24

					_delay_ms(15);

					if(UART_recieveByte() == CORRECT_PASSWORD){	/* If the password is correct */
    277a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    277e:	89 34       	cpi	r24, 0x49	; 73
    2780:	09 f0       	breq	.+2      	; 0x2784 <main+0x570>
    2782:	44 c0       	rjmp	.+136    	; 0x280c <main+0x5f8>

						PasswordCorrectnessFlag = 1;
    2784:	fe 01       	movw	r30, r28
    2786:	ef 57       	subi	r30, 0x7F	; 127
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	80 83       	st	Z, r24

						/* Ask Control ECU to unlock the door */
						UART_sendByte(OPEN_DOOR);
    278e:	87 e4       	ldi	r24, 0x47	; 71
    2790:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

						Timer1_init(&Timer1Config);
    2794:	85 e6       	ldi	r24, 0x65	; 101
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>

						LCD_clearScreen();
    279c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Unlocking...");
    27a0:	27 ec       	ldi	r18, 0xC7	; 199
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	a9 01       	movw	r20, r18
    27aa:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>
						while(Timer1Ticks != 15);
    27ae:	80 91 7c 01 	lds	r24, 0x017C
    27b2:	8f 30       	cpi	r24, 0x0F	; 15
    27b4:	e1 f7       	brne	.-8      	; 0x27ae <main+0x59a>
						Timer1Ticks = 0;
    27b6:	10 92 7c 01 	sts	0x017C, r1
						Timer1_deInit();
    27ba:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
						Timer1_init(&Timer1Config);
    27be:	85 e6       	ldi	r24, 0x65	; 101
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>
						LCD_displayStringRowColumn(0,0,"Holding...  ");
    27c6:	24 ed       	ldi	r18, 0xD4	; 212
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	a9 01       	movw	r20, r18
    27d0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>
						while(Timer1Ticks != 3);
    27d4:	80 91 7c 01 	lds	r24, 0x017C
    27d8:	83 30       	cpi	r24, 0x03	; 3
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <main+0x5c0>
						Timer1Ticks = 0;
    27dc:	10 92 7c 01 	sts	0x017C, r1
						Timer1_deInit();
    27e0:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
						Timer1_init(&Timer1Config);
    27e4:	85 e6       	ldi	r24, 0x65	; 101
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>
						LCD_displayStringRowColumn(0,0,"Locking...  ");
    27ec:	21 ee       	ldi	r18, 0xE1	; 225
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	a9 01       	movw	r20, r18
    27f6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_displayStringRowColumn>
						while(Timer1Ticks != 15);
    27fa:	80 91 7c 01 	lds	r24, 0x017C
    27fe:	8f 30       	cpi	r24, 0x0F	; 15
    2800:	e1 f7       	brne	.-8      	; 0x27fa <main+0x5e6>
						Timer1Ticks = 0;
    2802:	10 92 7c 01 	sts	0x017C, r1
						Timer1_deInit();
    2806:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
    280a:	d7 c0       	rjmp	.+430    	; 0x29ba <main+0x7a6>

					}
					else {	/* If the password is wrong */

						NumberOfTries++;
    280c:	de 01       	movw	r26, r28
    280e:	ae 57       	subi	r26, 0x7E	; 126
    2810:	bf 4f       	sbci	r27, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	ee 57       	subi	r30, 0x7E	; 126
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	8c 93       	st	X, r24

						LCD_clearScreen();
    281e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
						LCD_displayString("Wrong Password!");
    2822:	8e ee       	ldi	r24, 0xEE	; 238
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
						LCD_moveCursor(1,0);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
						LCD_displayString("Tries Remain: ");
    2832:	8e ef       	ldi	r24, 0xFE	; 254
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
						LCD_intgerToString(3-NumberOfTries);
    283a:	fe 01       	movw	r30, r28
    283c:	ee 57       	subi	r30, 0x7E	; 126
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	82 1b       	sub	r24, r18
    284c:	93 0b       	sbc	r25, r19
    284e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_intgerToString>
    2852:	fe 01       	movw	r30, r28
    2854:	e1 5a       	subi	r30, 0xA1	; 161
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	aa ef       	ldi	r26, 0xFA	; 250
    285e:	b4 e4       	ldi	r27, 0x44	; 68
    2860:	80 83       	st	Z, r24
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	a2 83       	std	Z+2, r26	; 0x02
    2866:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	8e 01       	movw	r16, r28
    286a:	05 5a       	subi	r16, 0xA5	; 165
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	e1 5a       	subi	r30, 0xA1	; 161
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2896:	fe 01       	movw	r30, r28
    2898:	e5 5a       	subi	r30, 0xA5	; 165
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	44 f4       	brge	.+16     	; 0x28c4 <main+0x6b0>
		__ticks = 1;
    28b4:	fe 01       	movw	r30, r28
    28b6:	e7 5a       	subi	r30, 0xA7	; 167
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
    28c2:	64 c0       	rjmp	.+200    	; 0x298c <main+0x778>
	else if (__tmp > 65535)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e5 5a       	subi	r30, 0xA5	; 165
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	0c f0       	brlt	.+2      	; 0x28e4 <main+0x6d0>
    28e2:	43 c0       	rjmp	.+134    	; 0x296a <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	fe 01       	movw	r30, r28
    28e6:	e1 5a       	subi	r30, 0xA1	; 161
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8e 01       	movw	r16, r28
    2904:	07 5a       	subi	r16, 0xA7	; 167
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	f8 01       	movw	r30, r16
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
    291a:	1f c0       	rjmp	.+62     	; 0x295a <main+0x746>
    291c:	fe 01       	movw	r30, r28
    291e:	e9 5a       	subi	r30, 0xA9	; 169
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	fe 01       	movw	r30, r28
    292c:	e9 5a       	subi	r30, 0xA9	; 169
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <main+0x720>
    2938:	fe 01       	movw	r30, r28
    293a:	e9 5a       	subi	r30, 0xA9	; 169
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	de 01       	movw	r26, r28
    2944:	a7 5a       	subi	r26, 0xA7	; 167
    2946:	bf 4f       	sbci	r27, 0xFF	; 255
    2948:	fe 01       	movw	r30, r28
    294a:	e7 5a       	subi	r30, 0xA7	; 167
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	9c 93       	st	X, r25
    2958:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	fe 01       	movw	r30, r28
    295c:	e7 5a       	subi	r30, 0xA7	; 167
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	d1 f6       	brne	.-76     	; 0x291c <main+0x708>
    2968:	28 c0       	rjmp	.+80     	; 0x29ba <main+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	8e 01       	movw	r16, r28
    296c:	07 5a       	subi	r16, 0xA7	; 167
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	fe 01       	movw	r30, r28
    2972:	e5 5a       	subi	r30, 0xA5	; 165
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	f8 01       	movw	r30, r16
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	de 01       	movw	r26, r28
    298e:	ab 5a       	subi	r26, 0xAB	; 171
    2990:	bf 4f       	sbci	r27, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	e7 5a       	subi	r30, 0xA7	; 167
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	11 96       	adiw	r26, 0x01	; 1
    299e:	9c 93       	st	X, r25
    29a0:	8e 93       	st	-X, r24
    29a2:	fe 01       	movw	r30, r28
    29a4:	eb 5a       	subi	r30, 0xAB	; 171
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <main+0x798>
    29b0:	fe 01       	movw	r30, r28
    29b2:	eb 5a       	subi	r30, 0xAB	; 171
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
						_delay_ms(2000);

					}
				}
				while((NumberOfTries < 3) && !PasswordCorrectnessFlag);
    29ba:	fe 01       	movw	r30, r28
    29bc:	ee 57       	subi	r30, 0x7E	; 126
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	83 30       	cpi	r24, 0x03	; 3
    29c4:	38 f4       	brcc	.+14     	; 0x29d4 <main+0x7c0>
    29c6:	fe 01       	movw	r30, r28
    29c8:	ef 57       	subi	r30, 0x7F	; 127
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	88 23       	and	r24, r24
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <main+0x7c0>
    29d2:	05 ce       	rjmp	.-1014   	; 0x25de <main+0x3ca>

				/* If the user exhausted all attempts */
				if(PasswordCorrectnessFlag == 0){
    29d4:	fe 01       	movw	r30, r28
    29d6:	ef 57       	subi	r30, 0x7F	; 127
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	88 23       	and	r24, r24
    29de:	09 f0       	breq	.+2      	; 0x29e2 <main+0x7ce>
    29e0:	c5 cd       	rjmp	.-1142   	; 0x256c <main+0x358>

					UART_sendByte(ALARM_MODE);	/* Ask Control ECU to make alarm */
    29e2:	8b e4       	ldi	r24, 0x4B	; 75
    29e4:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
					Alarm_mode();
    29e8:	0e 94 60 19 	call	0x32c0	; 0x32c0 <Alarm_mode>
    29ec:	bf cd       	rjmp	.-1154   	; 0x256c <main+0x358>
			case '-':
				/* Asking for the password while the user didn't enter correct password
				 * have remaining attempts */

				do{
					PasswordCorrectnessFlag = 0;		/* Reseting password correctness flag */
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 57       	subi	r30, 0x7F	; 127
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	10 82       	st	Z, r1

					LCD_clearScreen();
    29f6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
					LCD_displayString("Enter Password:");
    29fa:	81 eb       	ldi	r24, 0xB1	; 177
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
					LCD_moveCursor(1,0);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
					LCD_displayString("     ");
    2a0a:	81 ec       	ldi	r24, 0xC1	; 193
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
					PasswordsMatchingFlag = 1;
    2a12:	fe 01       	movw	r30, r28
    2a14:	e0 58       	subi	r30, 0x80	; 128
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	80 83       	st	Z, r24
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ef 5a       	subi	r30, 0xAF	; 175
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	aa ef       	ldi	r26, 0xFA	; 250
    2a28:	b3 e4       	ldi	r27, 0x43	; 67
    2a2a:	80 83       	st	Z, r24
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	a2 83       	std	Z+2, r26	; 0x02
    2a30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a32:	8e 01       	movw	r16, r28
    2a34:	03 5b       	subi	r16, 0xB3	; 179
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ef 5a       	subi	r30, 0xAF	; 175
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a ef       	ldi	r20, 0xFA	; 250
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	f8 01       	movw	r30, r16
    2a58:	80 83       	st	Z, r24
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	a2 83       	std	Z+2, r26	; 0x02
    2a5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a60:	fe 01       	movw	r30, r28
    2a62:	e3 5b       	subi	r30, 0xB3	; 179
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	44 f4       	brge	.+16     	; 0x2a8e <main+0x87a>
		__ticks = 1;
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e5 5b       	subi	r30, 0xB5	; 181
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	64 c0       	rjmp	.+200    	; 0x2b56 <main+0x942>
	else if (__tmp > 65535)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e3 5b       	subi	r30, 0xB3	; 179
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	0c f0       	brlt	.+2      	; 0x2aae <main+0x89a>
    2aac:	43 c0       	rjmp	.+134    	; 0x2b34 <main+0x920>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ef 5a       	subi	r30, 0xAF	; 175
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	8e 01       	movw	r16, r28
    2ace:	05 5b       	subi	r16, 0xB5	; 181
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
    2ae4:	1f c0       	rjmp	.+62     	; 0x2b24 <main+0x910>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e7 5b       	subi	r30, 0xB7	; 183
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	88 ec       	ldi	r24, 0xC8	; 200
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	fe 01       	movw	r30, r28
    2af6:	e7 5b       	subi	r30, 0xB7	; 183
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <main+0x8ea>
    2b02:	fe 01       	movw	r30, r28
    2b04:	e7 5b       	subi	r30, 0xB7	; 183
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0c:	de 01       	movw	r26, r28
    2b0e:	a5 5b       	subi	r26, 0xB5	; 181
    2b10:	bf 4f       	sbci	r27, 0xFF	; 255
    2b12:	fe 01       	movw	r30, r28
    2b14:	e5 5b       	subi	r30, 0xB5	; 181
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	11 96       	adiw	r26, 0x01	; 1
    2b20:	9c 93       	st	X, r25
    2b22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	fe 01       	movw	r30, r28
    2b26:	e5 5b       	subi	r30, 0xB5	; 181
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	d1 f6       	brne	.-76     	; 0x2ae6 <main+0x8d2>
    2b32:	27 c0       	rjmp	.+78     	; 0x2b82 <main+0x96e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	8e 01       	movw	r16, r28
    2b36:	05 5b       	subi	r16, 0xB5	; 181
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e3 5b       	subi	r30, 0xB3	; 179
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	60 81       	ld	r22, Z
    2b42:	71 81       	ldd	r23, Z+1	; 0x01
    2b44:	82 81       	ldd	r24, Z+2	; 0x02
    2b46:	93 81       	ldd	r25, Z+3	; 0x03
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	f8 01       	movw	r30, r16
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	de 01       	movw	r26, r28
    2b58:	a9 5b       	subi	r26, 0xB9	; 185
    2b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e5 5b       	subi	r30, 0xB5	; 181
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	8d 93       	st	X+, r24
    2b68:	9c 93       	st	X, r25
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 5b       	subi	r30, 0xB9	; 185
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <main+0x960>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e9 5b       	subi	r30, 0xB9	; 185
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
					_delay_ms(500);

					/* Getting Control ECU ready to receive the password */
					UART_sendByte(TAKE_MAIN_PASSWORD);
    2b82:	86 e4       	ldi	r24, 0x46	; 70
    2b84:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

					/* Taking the password from the user using keypad */
					take_password_from_user();
    2b88:	0e 94 6d 1a 	call	0x34da	; 0x34da <take_password_from_user>

					/* Sending the password to Control ECU to check it */
					send_password(PasswordBuff);
    2b8c:	8e e7       	ldi	r24, 0x7E	; 126
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	0e 94 b5 18 	call	0x316a	; 0x316a <send_password>
    2b94:	fe 01       	movw	r30, r28
    2b96:	ed 5b       	subi	r30, 0xBD	; 189
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a0 e7       	ldi	r26, 0x70	; 112
    2ba0:	b1 e4       	ldi	r27, 0x41	; 65
    2ba2:	80 83       	st	Z, r24
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	a2 83       	std	Z+2, r26	; 0x02
    2ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	8e 01       	movw	r16, r28
    2bac:	01 5c       	subi	r16, 0xC1	; 193
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ed 5b       	subi	r30, 0xBD	; 189
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	4a ef       	ldi	r20, 0xFA	; 250
    2bc4:	54 e4       	ldi	r21, 0x44	; 68
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	f8 01       	movw	r30, r16
    2bd0:	80 83       	st	Z, r24
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	a2 83       	std	Z+2, r26	; 0x02
    2bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ff 96       	adiw	r30, 0x3f	; 63
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <main+0x9ea>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e af       	std	Y+62, r25	; 0x3e
    2bfa:	8d af       	std	Y+61, r24	; 0x3d
    2bfc:	46 c0       	rjmp	.+140    	; 0x2c8a <main+0xa76>
	else if (__tmp > 65535)
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ff 96       	adiw	r30, 0x3f	; 63
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	57 e4       	ldi	r21, 0x47	; 71
    2c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	64 f5       	brge	.+88     	; 0x2c72 <main+0xa5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 5b       	subi	r30, 0xBD	; 189
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e af       	std	Y+62, r25	; 0x3e
    2c46:	8d af       	std	Y+61, r24	; 0x3d
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <main+0xa54>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c af       	std	Y+60, r25	; 0x3c
    2c50:	8b af       	std	Y+59, r24	; 0x3b
    2c52:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c54:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <main+0xa42>
    2c5a:	9c af       	std	Y+60, r25	; 0x3c
    2c5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9e af       	std	Y+62, r25	; 0x3e
    2c66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <main+0xa36>
    2c70:	16 c0       	rjmp	.+44     	; 0x2c9e <main+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	fe 01       	movw	r30, r28
    2c74:	ff 96       	adiw	r30, 0x3f	; 63
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e af       	std	Y+62, r25	; 0x3e
    2c88:	8d af       	std	Y+61, r24	; 0x3d
    2c8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c8e:	9a af       	std	Y+58, r25	; 0x3a
    2c90:	89 af       	std	Y+57, r24	; 0x39
    2c92:	89 ad       	ldd	r24, Y+57	; 0x39
    2c94:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <main+0xa82>
    2c9a:	9a af       	std	Y+58, r25	; 0x3a
    2c9c:	89 af       	std	Y+57, r24	; 0x39

					_delay_ms(15);

					if(UART_recieveByte() == CORRECT_PASSWORD){		/* If the password is correct */
    2c9e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    2ca2:	89 34       	cpi	r24, 0x49	; 73
    2ca4:	51 f4       	brne	.+20     	; 0x2cba <main+0xaa6>

						PasswordSetFlag = 0;		/* Make the user able to create new password */
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e1 58       	subi	r30, 0x81	; 129
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	10 82       	st	Z, r1
						PasswordCorrectnessFlag = 1;
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ef 57       	subi	r30, 0x7F	; 127
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	80 83       	st	Z, r24
    2cb8:	95 c0       	rjmp	.+298    	; 0x2de4 <main+0xbd0>
					}

					else{	/* If the password is wrong */

						NumberOfTries++;
    2cba:	de 01       	movw	r26, r28
    2cbc:	ae 57       	subi	r26, 0x7E	; 126
    2cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ee 57       	subi	r30, 0x7E	; 126
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	8c 93       	st	X, r24

						LCD_clearScreen();
    2ccc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
						LCD_displayString("Wrong Password!");
    2cd0:	8e ee       	ldi	r24, 0xEE	; 238
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
						LCD_moveCursor(1,0);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
						LCD_displayString("Tries Remain: ");
    2ce0:	8e ef       	ldi	r24, 0xFE	; 254
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
						LCD_intgerToString(3-NumberOfTries);
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ee 57       	subi	r30, 0x7E	; 126
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 81       	ld	r24, Z
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	82 1b       	sub	r24, r18
    2cfa:	93 0b       	sbc	r25, r19
    2cfc:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_intgerToString>
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	aa ef       	ldi	r26, 0xFA	; 250
    2d06:	b4 e4       	ldi	r27, 0x44	; 68
    2d08:	8d ab       	std	Y+53, r24	; 0x35
    2d0a:	9e ab       	std	Y+54, r25	; 0x36
    2d0c:	af ab       	std	Y+55, r26	; 0x37
    2d0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	6d a9       	ldd	r22, Y+53	; 0x35
    2d12:	7e a9       	ldd	r23, Y+54	; 0x36
    2d14:	8f a9       	ldd	r24, Y+55	; 0x37
    2d16:	98 ad       	ldd	r25, Y+56	; 0x38
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a ef       	ldi	r20, 0xFA	; 250
    2d1e:	54 e4       	ldi	r21, 0x44	; 68
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	89 ab       	std	Y+49, r24	; 0x31
    2d2a:	9a ab       	std	Y+50, r25	; 0x32
    2d2c:	ab ab       	std	Y+51, r26	; 0x33
    2d2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d30:	69 a9       	ldd	r22, Y+49	; 0x31
    2d32:	7a a9       	ldd	r23, Y+50	; 0x32
    2d34:	8b a9       	ldd	r24, Y+51	; 0x33
    2d36:	9c a9       	ldd	r25, Y+52	; 0x34
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <main+0xb3e>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	98 ab       	std	Y+48, r25	; 0x30
    2d4e:	8f a7       	std	Y+47, r24	; 0x2f
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <main+0xbbc>
	else if (__tmp > 65535)
    2d52:	69 a9       	ldd	r22, Y+49	; 0x31
    2d54:	7a a9       	ldd	r23, Y+50	; 0x32
    2d56:	8b a9       	ldd	r24, Y+51	; 0x33
    2d58:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	4c f5       	brge	.+82     	; 0x2dbc <main+0xba8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d70:	98 ad       	ldd	r25, Y+56	; 0x38
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	98 ab       	std	Y+48, r25	; 0x30
    2d90:	8f a7       	std	Y+47, r24	; 0x2f
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <main+0xb9e>
    2d94:	88 ec       	ldi	r24, 0xC8	; 200
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9e a7       	std	Y+46, r25	; 0x2e
    2d9a:	8d a7       	std	Y+45, r24	; 0x2d
    2d9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <main+0xb8c>
    2da4:	9e a7       	std	Y+46, r25	; 0x2e
    2da6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2daa:	98 a9       	ldd	r25, Y+48	; 0x30
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	98 ab       	std	Y+48, r25	; 0x30
    2db0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db4:	98 a9       	ldd	r25, Y+48	; 0x30
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <main+0xb80>
    2dba:	14 c0       	rjmp	.+40     	; 0x2de4 <main+0xbd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dbe:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	98 ab       	std	Y+48, r25	; 0x30
    2dce:	8f a7       	std	Y+47, r24	; 0x2f
    2dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd4:	9c a7       	std	Y+44, r25	; 0x2c
    2dd6:	8b a7       	std	Y+43, r24	; 0x2b
    2dd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dda:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <main+0xbc8>
    2de0:	9c a7       	std	Y+44, r25	; 0x2c
    2de2:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);

					}
				}
				while((NumberOfTries < 3) && !PasswordCorrectnessFlag);
    2de4:	fe 01       	movw	r30, r28
    2de6:	ee 57       	subi	r30, 0x7E	; 126
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	83 30       	cpi	r24, 0x03	; 3
    2dee:	38 f4       	brcc	.+14     	; 0x2dfe <main+0xbea>
    2df0:	fe 01       	movw	r30, r28
    2df2:	ef 57       	subi	r30, 0x7F	; 127
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <main+0xbea>
    2dfc:	f8 cd       	rjmp	.-1040   	; 0x29ee <main+0x7da>

				if(PasswordCorrectnessFlag == 0){
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ef 57       	subi	r30, 0x7F	; 127
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	88 23       	and	r24, r24
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <main+0xbf8>
    2e0a:	b0 cb       	rjmp	.-2208   	; 0x256c <main+0x358>

					UART_sendByte(ALARM_MODE);		/* Ask Control ECU to make alarm */
    2e0c:	8b e4       	ldi	r24, 0x4B	; 75
    2e0e:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
					Alarm_mode();
    2e12:	0e 94 60 19 	call	0x32c0	; 0x32c0 <Alarm_mode>
    2e16:	aa cb       	rjmp	.-2220   	; 0x256c <main+0x358>
			}
		}

		else{

			LCD_clearScreen();
    2e18:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
			LCD_displayString("Enter New Pass:");
    2e1c:	8d e0       	ldi	r24, 0x0D	; 13
    2e1e:	91 e0       	ldi	r25, 0x01	; 1
    2e20:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
			LCD_moveCursor(1,0);
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
			LCD_displayString("     ");
    2e2c:	81 ec       	ldi	r24, 0xC1	; 193
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>

			PasswordsMatchingFlag = 1;
    2e34:	fe 01       	movw	r30, r28
    2e36:	e0 58       	subi	r30, 0x80	; 128
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 83       	st	Z, r24

			/* Getting Control ECU ready to receive the password */
			UART_sendByte(TAKE_THE_FIRST_PASSWORD);
    2e3e:	81 e4       	ldi	r24, 0x41	; 65
    2e40:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

			/* Taking the password from the user using keypad */
			take_password_from_user();
    2e44:	0e 94 6d 1a 	call	0x34da	; 0x34da <take_password_from_user>

			/* Sending the password to Control ECU to check it */
			send_password(PasswordBuff);
    2e48:	8e e7       	ldi	r24, 0x7E	; 126
    2e4a:	91 e0       	ldi	r25, 0x01	; 1
    2e4c:	0e 94 b5 18 	call	0x316a	; 0x316a <send_password>

			LCD_clearScreen();
    2e50:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
			LCD_displayString("Re-Enter Pass:");
    2e54:	8d e1       	ldi	r24, 0x1D	; 29
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
			LCD_moveCursor(1,0);
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
			LCD_displayString("     ");
    2e64:	81 ec       	ldi	r24, 0xC1	; 193
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e7       	ldi	r26, 0x70	; 112
    2e72:	b1 e4       	ldi	r27, 0x41	; 65
    2e74:	8f a3       	std	Y+39, r24	; 0x27
    2e76:	98 a7       	std	Y+40, r25	; 0x28
    2e78:	a9 a7       	std	Y+41, r26	; 0x29
    2e7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e80:	89 a5       	ldd	r24, Y+41	; 0x29
    2e82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8b a3       	std	Y+35, r24	; 0x23
    2e96:	9c a3       	std	Y+36, r25	; 0x24
    2e98:	ad a3       	std	Y+37, r26	; 0x25
    2e9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <main+0xcaa>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9a a3       	std	Y+34, r25	; 0x22
    2eba:	89 a3       	std	Y+33, r24	; 0x21
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <main+0xd28>
	else if (__tmp > 65535)
    2ebe:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <main+0xd14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eda:	89 a5       	ldd	r24, Y+41	; 0x29
    2edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9a a3       	std	Y+34, r25	; 0x22
    2efc:	89 a3       	std	Y+33, r24	; 0x21
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <main+0xd0a>
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	98 a3       	std	Y+32, r25	; 0x20
    2f06:	8f 8f       	std	Y+31, r24	; 0x1f
    2f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <main+0xcf8>
    2f10:	98 a3       	std	Y+32, r25	; 0x20
    2f12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	89 a1       	ldd	r24, Y+33	; 0x21
    2f16:	9a a1       	ldd	r25, Y+34	; 0x22
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9a a3       	std	Y+34, r25	; 0x22
    2f1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f20:	9a a1       	ldd	r25, Y+34	; 0x22
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <main+0xcec>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <main+0xd3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	9e 8f       	std	Y+30, r25	; 0x1e
    2f42:	8d 8f       	std	Y+29, r24	; 0x1d
    2f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <main+0xd34>
    2f4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f4e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(15);

			/* Getting Control ECU ready to receive the password */
			UART_sendByte(TAKE_THE_SECOND_PASSWORD);
    2f50:	82 e4       	ldi	r24, 0x42	; 66
    2f52:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>

			/* Taking the password from the user using keypad */
			take_password_from_user();
    2f56:	0e 94 6d 1a 	call	0x34da	; 0x34da <take_password_from_user>

			/* Sending the password to Control ECU to check it */
			send_password(PasswordBuff);
    2f5a:	8e e7       	ldi	r24, 0x7E	; 126
    2f5c:	91 e0       	ldi	r25, 0x01	; 1
    2f5e:	0e 94 b5 18 	call	0x316a	; 0x316a <send_password>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e7       	ldi	r26, 0x70	; 112
    2f68:	b1 e4       	ldi	r27, 0x41	; 65
    2f6a:	89 8f       	std	Y+25, r24	; 0x19
    2f6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	69 8d       	ldd	r22, Y+25	; 0x19
    2f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a ef       	ldi	r20, 0xFA	; 250
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8d 8b       	std	Y+21, r24	; 0x15
    2f8c:	9e 8b       	std	Y+22, r25	; 0x16
    2f8e:	af 8b       	std	Y+23, r26	; 0x17
    2f90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <main+0xda0>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <main+0xe1e>
	else if (__tmp > 65535)
    2fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fba:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <main+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9c 8b       	std	Y+20, r25	; 0x14
    2ff2:	8b 8b       	std	Y+19, r24	; 0x13
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <main+0xe00>
    2ff6:	88 ec       	ldi	r24, 0xC8	; 200
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9a 8b       	std	Y+18, r25	; 0x12
    2ffc:	89 8b       	std	Y+17, r24	; 0x11
    2ffe:	89 89       	ldd	r24, Y+17	; 0x11
    3000:	9a 89       	ldd	r25, Y+18	; 0x12
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <main+0xdee>
    3006:	9a 8b       	std	Y+18, r25	; 0x12
    3008:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8b 89       	ldd	r24, Y+19	; 0x13
    3016:	9c 89       	ldd	r25, Y+20	; 0x14
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <main+0xde2>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <main+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6d 89       	ldd	r22, Y+21	; 0x15
    3020:	7e 89       	ldd	r23, Y+22	; 0x16
    3022:	8f 89       	ldd	r24, Y+23	; 0x17
    3024:	98 8d       	ldd	r25, Y+24	; 0x18
    3026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	98 8b       	std	Y+16, r25	; 0x10
    3038:	8f 87       	std	Y+15, r24	; 0x0f
    303a:	8f 85       	ldd	r24, Y+15	; 0x0f
    303c:	98 89       	ldd	r25, Y+16	; 0x10
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <main+0xe2a>
    3042:	98 8b       	std	Y+16, r25	; 0x10
    3044:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(15);

			/* Asking Control ECU if the two password are identical or not? */
			UART_sendByte(ARE_THEM_MATCHED);
    3046:	83 e4       	ldi	r24, 0x43	; 67
    3048:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
			PasswordsMatchingFlag = UART_recieveByte();
    304c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
    3050:	fe 01       	movw	r30, r28
    3052:	e0 58       	subi	r30, 0x80	; 128
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 83       	st	Z, r24

			if(PasswordsMatchingFlag == MATCHED){	/* If identical */
    3058:	fe 01       	movw	r30, r28
    305a:	e0 58       	subi	r30, 0x80	; 128
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	84 34       	cpi	r24, 0x44	; 68
    3062:	51 f4       	brne	.+20     	; 0x3078 <main+0xe64>

				PasswordSetFlag = 1;
    3064:	fe 01       	movw	r30, r28
    3066:	e1 58       	subi	r30, 0x81	; 129
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	80 83       	st	Z, r24
				PasswordsMatchingFlag = 0;
    306e:	fe 01       	movw	r30, r28
    3070:	e0 58       	subi	r30, 0x80	; 128
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	10 82       	st	Z, r1
    3076:	7a ca       	rjmp	.-2828   	; 0x256c <main+0x358>
			}

			else {	/* If not identical */
				LCD_clearScreen();
    3078:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
				LCD_displayString("   Unmatched!  ");
    307c:	8c e2       	ldi	r24, 0x2C	; 44
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	aa e7       	ldi	r26, 0x7A	; 122
    308a:	b4 e4       	ldi	r27, 0x44	; 68
    308c:	8b 87       	std	Y+11, r24	; 0x0b
    308e:	9c 87       	std	Y+12, r25	; 0x0c
    3090:	ad 87       	std	Y+13, r26	; 0x0d
    3092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a ef       	ldi	r20, 0xFA	; 250
    30a2:	54 e4       	ldi	r21, 0x44	; 68
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	8f 83       	std	Y+7, r24	; 0x07
    30ae:	98 87       	std	Y+8, r25	; 0x08
    30b0:	a9 87       	std	Y+9, r26	; 0x09
    30b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b4:	6f 81       	ldd	r22, Y+7	; 0x07
    30b6:	78 85       	ldd	r23, Y+8	; 0x08
    30b8:	89 85       	ldd	r24, Y+9	; 0x09
    30ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <main+0xec2>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <main+0xf40>
	else if (__tmp > 65535)
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <main+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <main+0xf22>
    3118:	88 ec       	ldi	r24, 0xC8	; 200
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <main+0xf10>
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <main+0xf04>
    313e:	16 ca       	rjmp	.-3028   	; 0x256c <main+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <main+0xf4c>
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	01 ca       	rjmp	.-3070   	; 0x256c <main+0x358>

0000316a <send_password>:

	return 0;

}

void send_password(uint8 *password_arr){
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	62 97       	sbiw	r28, 0x12	; 18
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0 ; i < 5 ; i++){
    3182:	18 8a       	std	Y+16, r1	; 0x10
    3184:	1f 86       	std	Y+15, r1	; 0x0f
    3186:	81 c0       	rjmp	.+258    	; 0x328a <send_password+0x120>
		UART_sendByte(password_arr[i]);
    3188:	2f 85       	ldd	r18, Y+15	; 0x0f
    318a:	38 89       	ldd	r19, Y+16	; 0x10
    318c:	89 89       	ldd	r24, Y+17	; 0x11
    318e:	9a 89       	ldd	r25, Y+18	; 0x12
    3190:	fc 01       	movw	r30, r24
    3192:	e2 0f       	add	r30, r18
    3194:	f3 1f       	adc	r31, r19
    3196:	80 81       	ld	r24, Z
    3198:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e7       	ldi	r26, 0x70	; 112
    31a2:	b1 e4       	ldi	r27, 0x41	; 65
    31a4:	8b 87       	std	Y+11, r24	; 0x0b
    31a6:	9c 87       	std	Y+12, r25	; 0x0c
    31a8:	ad 87       	std	Y+13, r26	; 0x0d
    31aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	4a ef       	ldi	r20, 0xFA	; 250
    31ba:	54 e4       	ldi	r21, 0x44	; 68
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8f 83       	std	Y+7, r24	; 0x07
    31c6:	98 87       	std	Y+8, r25	; 0x08
    31c8:	a9 87       	std	Y+9, r26	; 0x09
    31ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31cc:	6f 81       	ldd	r22, Y+7	; 0x07
    31ce:	78 85       	ldd	r23, Y+8	; 0x08
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	2c f4       	brge	.+10     	; 0x31ee <send_password+0x84>
		__ticks = 1;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
    31ec:	3f c0       	rjmp	.+126    	; 0x326c <send_password+0x102>
	else if (__tmp > 65535)
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	3f ef       	ldi	r19, 0xFF	; 255
    31fa:	4f e7       	ldi	r20, 0x7F	; 127
    31fc:	57 e4       	ldi	r21, 0x47	; 71
    31fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3202:	18 16       	cp	r1, r24
    3204:	4c f5       	brge	.+82     	; 0x3258 <send_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3206:	6b 85       	ldd	r22, Y+11	; 0x0b
    3208:	7c 85       	ldd	r23, Y+12	; 0x0c
    320a:	8d 85       	ldd	r24, Y+13	; 0x0d
    320c:	9e 85       	ldd	r25, Y+14	; 0x0e
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	0f c0       	rjmp	.+30     	; 0x324e <send_password+0xe4>
    3230:	88 ec       	ldi	r24, 0xC8	; 200
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9c 83       	std	Y+4, r25	; 0x04
    3236:	8b 83       	std	Y+3, r24	; 0x03
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <send_password+0xd2>
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	69 f7       	brne	.-38     	; 0x3230 <send_password+0xc6>
    3256:	14 c0       	rjmp	.+40     	; 0x3280 <send_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6f 81       	ldd	r22, Y+7	; 0x07
    325a:	78 85       	ldd	r23, Y+8	; 0x08
    325c:	89 85       	ldd	r24, Y+9	; 0x09
    325e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	9a 81       	ldd	r25, Y+2	; 0x02
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <send_password+0x10e>
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	89 83       	std	Y+1, r24	; 0x01
	return 0;

}

void send_password(uint8 *password_arr){
	for(int i = 0 ; i < 5 ; i++){
    3280:	8f 85       	ldd	r24, Y+15	; 0x0f
    3282:	98 89       	ldd	r25, Y+16	; 0x10
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	98 8b       	std	Y+16, r25	; 0x10
    3288:	8f 87       	std	Y+15, r24	; 0x0f
    328a:	8f 85       	ldd	r24, Y+15	; 0x0f
    328c:	98 89       	ldd	r25, Y+16	; 0x10
    328e:	85 30       	cpi	r24, 0x05	; 5
    3290:	91 05       	cpc	r25, r1
    3292:	0c f4       	brge	.+2      	; 0x3296 <send_password+0x12c>
    3294:	79 cf       	rjmp	.-270    	; 0x3188 <send_password+0x1e>
		UART_sendByte(password_arr[i]);
		_delay_ms(15);
	}

}
    3296:	62 96       	adiw	r28, 0x12	; 18
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <timer1_tick>:
void timer1_tick(void){
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	Timer1Ticks++;
    32b0:	80 91 7c 01 	lds	r24, 0x017C
    32b4:	8f 5f       	subi	r24, 0xFF	; 255
    32b6:	80 93 7c 01 	sts	0x017C, r24
}
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <Alarm_mode>:
void Alarm_mode(void){
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	6c 97       	sbiw	r28, 0x1c	; 28
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    32d4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
	Timer1_init(&Timer1Config);
    32d8:	85 e6       	ldi	r24, 0x65	; 101
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>
    32e0:	ea c0       	rjmp	.+468    	; 0x34b6 <Alarm_mode+0x1f6>
	while(Timer1Ticks != 60){
		LCD_displayString("    WARNING!    ");
    32e2:	8c e3       	ldi	r24, 0x3C	; 60
    32e4:	91 e0       	ldi	r25, 0x01	; 1
    32e6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_displayString>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	aa ef       	ldi	r26, 0xFA	; 250
    32f0:	b3 e4       	ldi	r27, 0x43	; 67
    32f2:	89 8f       	std	Y+25, r24	; 0x19
    32f4:	9a 8f       	std	Y+26, r25	; 0x1a
    32f6:	ab 8f       	std	Y+27, r26	; 0x1b
    32f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	69 8d       	ldd	r22, Y+25	; 0x19
    32fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8d 8b       	std	Y+21, r24	; 0x15
    3314:	9e 8b       	std	Y+22, r25	; 0x16
    3316:	af 8b       	std	Y+23, r26	; 0x17
    3318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331a:	6d 89       	ldd	r22, Y+21	; 0x15
    331c:	7e 89       	ldd	r23, Y+22	; 0x16
    331e:	8f 89       	ldd	r24, Y+23	; 0x17
    3320:	98 8d       	ldd	r25, Y+24	; 0x18
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <Alarm_mode+0x7c>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9c 8b       	std	Y+20, r25	; 0x14
    3338:	8b 8b       	std	Y+19, r24	; 0x13
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <Alarm_mode+0xfa>
	else if (__tmp > 65535)
    333c:	6d 89       	ldd	r22, Y+21	; 0x15
    333e:	7e 89       	ldd	r23, Y+22	; 0x16
    3340:	8f 89       	ldd	r24, Y+23	; 0x17
    3342:	98 8d       	ldd	r25, Y+24	; 0x18
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <Alarm_mode+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	69 8d       	ldd	r22, Y+25	; 0x19
    3356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9c 8b       	std	Y+20, r25	; 0x14
    337a:	8b 8b       	std	Y+19, r24	; 0x13
    337c:	0f c0       	rjmp	.+30     	; 0x339c <Alarm_mode+0xdc>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9a 8b       	std	Y+18, r25	; 0x12
    3384:	89 8b       	std	Y+17, r24	; 0x11
    3386:	89 89       	ldd	r24, Y+17	; 0x11
    3388:	9a 89       	ldd	r25, Y+18	; 0x12
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <Alarm_mode+0xca>
    338e:	9a 8b       	std	Y+18, r25	; 0x12
    3390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8b 89       	ldd	r24, Y+19	; 0x13
    3394:	9c 89       	ldd	r25, Y+20	; 0x14
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9c 8b       	std	Y+20, r25	; 0x14
    339a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8b 89       	ldd	r24, Y+19	; 0x13
    339e:	9c 89       	ldd	r25, Y+20	; 0x14
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <Alarm_mode+0xbe>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <Alarm_mode+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6d 89       	ldd	r22, Y+21	; 0x15
    33a8:	7e 89       	ldd	r23, Y+22	; 0x16
    33aa:	8f 89       	ldd	r24, Y+23	; 0x17
    33ac:	98 8d       	ldd	r25, Y+24	; 0x18
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9c 8b       	std	Y+20, r25	; 0x14
    33b8:	8b 8b       	std	Y+19, r24	; 0x13
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	98 8b       	std	Y+16, r25	; 0x10
    33c0:	8f 87       	std	Y+15, r24	; 0x0f
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	98 89       	ldd	r25, Y+16	; 0x10
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <Alarm_mode+0x106>
    33ca:	98 8b       	std	Y+16, r25	; 0x10
    33cc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_clearScreen();
    33ce:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_clearScreen>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	aa ef       	ldi	r26, 0xFA	; 250
    33d8:	b3 e4       	ldi	r27, 0x43	; 67
    33da:	8b 87       	std	Y+11, r24	; 0x0b
    33dc:	9c 87       	std	Y+12, r25	; 0x0c
    33de:	ad 87       	std	Y+13, r26	; 0x0d
    33e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a ef       	ldi	r20, 0xFA	; 250
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	8f 83       	std	Y+7, r24	; 0x07
    33fc:	98 87       	std	Y+8, r25	; 0x08
    33fe:	a9 87       	std	Y+9, r26	; 0x09
    3400:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	2c f4       	brge	.+10     	; 0x3424 <Alarm_mode+0x164>
		__ticks = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9e 83       	std	Y+6, r25	; 0x06
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	3f c0       	rjmp	.+126    	; 0x34a2 <Alarm_mode+0x1e2>
	else if (__tmp > 65535)
    3424:	6f 81       	ldd	r22, Y+7	; 0x07
    3426:	78 85       	ldd	r23, Y+8	; 0x08
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	3f ef       	ldi	r19, 0xFF	; 255
    3430:	4f e7       	ldi	r20, 0x7F	; 127
    3432:	57 e4       	ldi	r21, 0x47	; 71
    3434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3438:	18 16       	cp	r1, r24
    343a:	4c f5       	brge	.+82     	; 0x348e <Alarm_mode+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343c:	6b 85       	ldd	r22, Y+11	; 0x0b
    343e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3440:	8d 85       	ldd	r24, Y+13	; 0x0d
    3442:	9e 85       	ldd	r25, Y+14	; 0x0e
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e2       	ldi	r20, 0x20	; 32
    344a:	51 e4       	ldi	r21, 0x41	; 65
    344c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	0f c0       	rjmp	.+30     	; 0x3484 <Alarm_mode+0x1c4>
    3466:	88 ec       	ldi	r24, 0xC8	; 200
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9c 83       	std	Y+4, r25	; 0x04
    346c:	8b 83       	std	Y+3, r24	; 0x03
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	9c 81       	ldd	r25, Y+4	; 0x04
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <Alarm_mode+0x1b2>
    3476:	9c 83       	std	Y+4, r25	; 0x04
    3478:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	9e 81       	ldd	r25, Y+6	; 0x06
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	69 f7       	brne	.-38     	; 0x3466 <Alarm_mode+0x1a6>
    348c:	14 c0       	rjmp	.+40     	; 0x34b6 <Alarm_mode+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348e:	6f 81       	ldd	r22, Y+7	; 0x07
    3490:	78 85       	ldd	r23, Y+8	; 0x08
    3492:	89 85       	ldd	r24, Y+9	; 0x09
    3494:	9a 85       	ldd	r25, Y+10	; 0x0a
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9e 83       	std	Y+6, r25	; 0x06
    34a0:	8d 83       	std	Y+5, r24	; 0x05
    34a2:	8d 81       	ldd	r24, Y+5	; 0x05
    34a4:	9e 81       	ldd	r25, Y+6	; 0x06
    34a6:	9a 83       	std	Y+2, r25	; 0x02
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	9a 81       	ldd	r25, Y+2	; 0x02
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <Alarm_mode+0x1ee>
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	89 83       	std	Y+1, r24	; 0x01
	Timer1Ticks++;
}
void Alarm_mode(void){
	LCD_clearScreen();
	Timer1_init(&Timer1Config);
	while(Timer1Ticks != 60){
    34b6:	80 91 7c 01 	lds	r24, 0x017C
    34ba:	8c 33       	cpi	r24, 0x3C	; 60
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <Alarm_mode+0x200>
    34be:	11 cf       	rjmp	.-478    	; 0x32e2 <Alarm_mode+0x22>
		LCD_displayString("    WARNING!    ");
		_delay_ms(500);
		LCD_clearScreen();
		_delay_ms(500);
	}
	Timer1Ticks = 0;
    34c0:	10 92 7c 01 	sts	0x017C, r1
	Timer1_deInit();
    34c4:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_deInit>
}
    34c8:	6c 96       	adiw	r28, 0x1c	; 28
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	08 95       	ret

000034da <take_password_from_user>:
void take_password_from_user(void){
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	6c 97       	sbiw	r28, 0x1c	; 28
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
	for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    34f2:	10 92 7d 01 	sts	0x017D, r1
    34f6:	24 c1       	rjmp	.+584    	; 0x3740 <take_password_from_user+0x266>
		PasswordBuff[MultiUsedCounter] = KEYPAD_getPressedKey();
    34f8:	80 91 7d 01 	lds	r24, 0x017D
    34fc:	08 2f       	mov	r16, r24
    34fe:	10 e0       	ldi	r17, 0x00	; 0
    3500:	0e 94 22 10 	call	0x2044	; 0x2044 <KEYPAD_getPressedKey>
    3504:	f8 01       	movw	r30, r16
    3506:	e2 58       	subi	r30, 0x82	; 130
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	80 83       	st	Z, r24
		if(PasswordBuff[MultiUsedCounter] >= '0' && PasswordBuff[MultiUsedCounter] <= '9'){
    350c:	80 91 7d 01 	lds	r24, 0x017D
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	fc 01       	movw	r30, r24
    3516:	e2 58       	subi	r30, 0x82	; 130
    3518:	fe 4f       	sbci	r31, 0xFE	; 254
    351a:	80 81       	ld	r24, Z
    351c:	80 33       	cpi	r24, 0x30	; 48
    351e:	08 f4       	brcc	.+2      	; 0x3522 <take_password_from_user+0x48>
    3520:	93 c0       	rjmp	.+294    	; 0x3648 <take_password_from_user+0x16e>
    3522:	80 91 7d 01 	lds	r24, 0x017D
    3526:	88 2f       	mov	r24, r24
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	fc 01       	movw	r30, r24
    352c:	e2 58       	subi	r30, 0x82	; 130
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	80 81       	ld	r24, Z
    3532:	8a 33       	cpi	r24, 0x3A	; 58
    3534:	08 f0       	brcs	.+2      	; 0x3538 <take_password_from_user+0x5e>
    3536:	88 c0       	rjmp	.+272    	; 0x3648 <take_password_from_user+0x16e>
			LCD_displayCharacter(PasswordBuff[MultiUsedCounter]);
    3538:	80 91 7d 01 	lds	r24, 0x017D
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	fc 01       	movw	r30, r24
    3542:	e2 58       	subi	r30, 0x82	; 130
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	80 81       	ld	r24, Z
    3548:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_displayCharacter>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	aa ef       	ldi	r26, 0xFA	; 250
    3552:	b3 e4       	ldi	r27, 0x43	; 67
    3554:	89 8f       	std	Y+25, r24	; 0x19
    3556:	9a 8f       	std	Y+26, r25	; 0x1a
    3558:	ab 8f       	std	Y+27, r26	; 0x1b
    355a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355c:	69 8d       	ldd	r22, Y+25	; 0x19
    355e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	4a ef       	ldi	r20, 0xFA	; 250
    356a:	54 e4       	ldi	r21, 0x44	; 68
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	8d 8b       	std	Y+21, r24	; 0x15
    3576:	9e 8b       	std	Y+22, r25	; 0x16
    3578:	af 8b       	std	Y+23, r26	; 0x17
    357a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e8       	ldi	r20, 0x80	; 128
    358a:	5f e3       	ldi	r21, 0x3F	; 63
    358c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3590:	88 23       	and	r24, r24
    3592:	2c f4       	brge	.+10     	; 0x359e <take_password_from_user+0xc4>
		__ticks = 1;
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	9c 8b       	std	Y+20, r25	; 0x14
    359a:	8b 8b       	std	Y+19, r24	; 0x13
    359c:	3f c0       	rjmp	.+126    	; 0x361c <take_password_from_user+0x142>
	else if (__tmp > 65535)
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	3f ef       	ldi	r19, 0xFF	; 255
    35aa:	4f e7       	ldi	r20, 0x7F	; 127
    35ac:	57 e4       	ldi	r21, 0x47	; 71
    35ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	4c f5       	brge	.+82     	; 0x3608 <take_password_from_user+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b6:	69 8d       	ldd	r22, Y+25	; 0x19
    35b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e2       	ldi	r20, 0x20	; 32
    35c4:	51 e4       	ldi	r21, 0x41	; 65
    35c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <take_password_from_user+0x124>
    35e0:	88 ec       	ldi	r24, 0xC8	; 200
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
    35e8:	89 89       	ldd	r24, Y+17	; 0x11
    35ea:	9a 89       	ldd	r25, Y+18	; 0x12
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <take_password_from_user+0x112>
    35f0:	9a 8b       	std	Y+18, r25	; 0x12
    35f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f4:	8b 89       	ldd	r24, Y+19	; 0x13
    35f6:	9c 89       	ldd	r25, Y+20	; 0x14
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	9c 8b       	std	Y+20, r25	; 0x14
    35fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3600:	9c 89       	ldd	r25, Y+20	; 0x14
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	69 f7       	brne	.-38     	; 0x35e0 <take_password_from_user+0x106>
    3606:	14 c0       	rjmp	.+40     	; 0x3630 <take_password_from_user+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3608:	6d 89       	ldd	r22, Y+21	; 0x15
    360a:	7e 89       	ldd	r23, Y+22	; 0x16
    360c:	8f 89       	ldd	r24, Y+23	; 0x17
    360e:	98 8d       	ldd	r25, Y+24	; 0x18
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9c 8b       	std	Y+20, r25	; 0x14
    361a:	8b 8b       	std	Y+19, r24	; 0x13
    361c:	8b 89       	ldd	r24, Y+19	; 0x13
    361e:	9c 89       	ldd	r25, Y+20	; 0x14
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
    3624:	8f 85       	ldd	r24, Y+15	; 0x0f
    3626:	98 89       	ldd	r25, Y+16	; 0x10
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <take_password_from_user+0x14e>
    362c:	98 8b       	std	Y+16, r25	; 0x10
    362e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_moveCursor(1,5+MultiUsedCounter);
    3630:	80 91 7d 01 	lds	r24, 0x017D
    3634:	98 2f       	mov	r25, r24
    3636:	9b 5f       	subi	r25, 0xFB	; 251
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	69 2f       	mov	r22, r25
    363c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_moveCursor>
			LCD_displayCharacter('*');
    3640:	8a e2       	ldi	r24, 0x2A	; 42
    3642:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_displayCharacter>
    3646:	05 c0       	rjmp	.+10     	; 0x3652 <take_password_from_user+0x178>
		}
		else
			MultiUsedCounter--;
    3648:	80 91 7d 01 	lds	r24, 0x017D
    364c:	81 50       	subi	r24, 0x01	; 1
    364e:	80 93 7d 01 	sts	0x017D, r24
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a0 e7       	ldi	r26, 0x70	; 112
    3658:	b1 e4       	ldi	r27, 0x41	; 65
    365a:	8b 87       	std	Y+11, r24	; 0x0b
    365c:	9c 87       	std	Y+12, r25	; 0x0c
    365e:	ad 87       	std	Y+13, r26	; 0x0d
    3660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3662:	6b 85       	ldd	r22, Y+11	; 0x0b
    3664:	7c 85       	ldd	r23, Y+12	; 0x0c
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4a ef       	ldi	r20, 0xFA	; 250
    3670:	54 e4       	ldi	r21, 0x44	; 68
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	8f 83       	std	Y+7, r24	; 0x07
    367c:	98 87       	std	Y+8, r25	; 0x08
    367e:	a9 87       	std	Y+9, r26	; 0x09
    3680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3682:	6f 81       	ldd	r22, Y+7	; 0x07
    3684:	78 85       	ldd	r23, Y+8	; 0x08
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	2c f4       	brge	.+10     	; 0x36a4 <take_password_from_user+0x1ca>
		__ticks = 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	3f c0       	rjmp	.+126    	; 0x3722 <take_password_from_user+0x248>
	else if (__tmp > 65535)
    36a4:	6f 81       	ldd	r22, Y+7	; 0x07
    36a6:	78 85       	ldd	r23, Y+8	; 0x08
    36a8:	89 85       	ldd	r24, Y+9	; 0x09
    36aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	3f ef       	ldi	r19, 0xFF	; 255
    36b0:	4f e7       	ldi	r20, 0x7F	; 127
    36b2:	57 e4       	ldi	r21, 0x47	; 71
    36b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36b8:	18 16       	cp	r1, r24
    36ba:	4c f5       	brge	.+82     	; 0x370e <take_password_from_user+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36be:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e2       	ldi	r20, 0x20	; 32
    36ca:	51 e4       	ldi	r21, 0x41	; 65
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	0f c0       	rjmp	.+30     	; 0x3704 <take_password_from_user+0x22a>
    36e6:	88 ec       	ldi	r24, 0xC8	; 200
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	9c 83       	std	Y+4, r25	; 0x04
    36ec:	8b 83       	std	Y+3, r24	; 0x03
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	9c 81       	ldd	r25, Y+4	; 0x04
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <take_password_from_user+0x218>
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	69 f7       	brne	.-38     	; 0x36e6 <take_password_from_user+0x20c>
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <take_password_from_user+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <take_password_from_user+0x254>
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
	}
	Timer1Ticks = 0;
	Timer1_deInit();
}
void take_password_from_user(void){
	for(MultiUsedCounter = 0 ; MultiUsedCounter < 5 ; MultiUsedCounter++){
    3736:	80 91 7d 01 	lds	r24, 0x017D
    373a:	8f 5f       	subi	r24, 0xFF	; 255
    373c:	80 93 7d 01 	sts	0x017D, r24
    3740:	80 91 7d 01 	lds	r24, 0x017D
    3744:	85 30       	cpi	r24, 0x05	; 5
    3746:	08 f4       	brcc	.+2      	; 0x374a <take_password_from_user+0x270>
    3748:	d7 ce       	rjmp	.-594    	; 0x34f8 <take_password_from_user+0x1e>
		}
		else
			MultiUsedCounter--;
		_delay_ms(15);
	}
	while(KEYPAD_getPressedKey() != '=');
    374a:	0e 94 22 10 	call	0x2044	; 0x2044 <KEYPAD_getPressedKey>
    374e:	8d 33       	cpi	r24, 0x3D	; 61
    3750:	e1 f7       	brne	.-8      	; 0x374a <take_password_from_user+0x270>
}
    3752:	6c 96       	adiw	r28, 0x1c	; 28
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	08 95       	ret

00003768 <__udivmodsi4>:
    3768:	a1 e2       	ldi	r26, 0x21	; 33
    376a:	1a 2e       	mov	r1, r26
    376c:	aa 1b       	sub	r26, r26
    376e:	bb 1b       	sub	r27, r27
    3770:	fd 01       	movw	r30, r26
    3772:	0d c0       	rjmp	.+26     	; 0x378e <__udivmodsi4_ep>

00003774 <__udivmodsi4_loop>:
    3774:	aa 1f       	adc	r26, r26
    3776:	bb 1f       	adc	r27, r27
    3778:	ee 1f       	adc	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	a2 17       	cp	r26, r18
    377e:	b3 07       	cpc	r27, r19
    3780:	e4 07       	cpc	r30, r20
    3782:	f5 07       	cpc	r31, r21
    3784:	20 f0       	brcs	.+8      	; 0x378e <__udivmodsi4_ep>
    3786:	a2 1b       	sub	r26, r18
    3788:	b3 0b       	sbc	r27, r19
    378a:	e4 0b       	sbc	r30, r20
    378c:	f5 0b       	sbc	r31, r21

0000378e <__udivmodsi4_ep>:
    378e:	66 1f       	adc	r22, r22
    3790:	77 1f       	adc	r23, r23
    3792:	88 1f       	adc	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	1a 94       	dec	r1
    3798:	69 f7       	brne	.-38     	; 0x3774 <__udivmodsi4_loop>
    379a:	60 95       	com	r22
    379c:	70 95       	com	r23
    379e:	80 95       	com	r24
    37a0:	90 95       	com	r25
    37a2:	9b 01       	movw	r18, r22
    37a4:	ac 01       	movw	r20, r24
    37a6:	bd 01       	movw	r22, r26
    37a8:	cf 01       	movw	r24, r30
    37aa:	08 95       	ret

000037ac <__prologue_saves__>:
    37ac:	2f 92       	push	r2
    37ae:	3f 92       	push	r3
    37b0:	4f 92       	push	r4
    37b2:	5f 92       	push	r5
    37b4:	6f 92       	push	r6
    37b6:	7f 92       	push	r7
    37b8:	8f 92       	push	r8
    37ba:	9f 92       	push	r9
    37bc:	af 92       	push	r10
    37be:	bf 92       	push	r11
    37c0:	cf 92       	push	r12
    37c2:	df 92       	push	r13
    37c4:	ef 92       	push	r14
    37c6:	ff 92       	push	r15
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	ca 1b       	sub	r28, r26
    37d6:	db 0b       	sbc	r29, r27
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	09 94       	ijmp

000037e4 <__epilogue_restores__>:
    37e4:	2a 88       	ldd	r2, Y+18	; 0x12
    37e6:	39 88       	ldd	r3, Y+17	; 0x11
    37e8:	48 88       	ldd	r4, Y+16	; 0x10
    37ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    37ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    37ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    37f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    37f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    37f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    37f6:	b9 84       	ldd	r11, Y+9	; 0x09
    37f8:	c8 84       	ldd	r12, Y+8	; 0x08
    37fa:	df 80       	ldd	r13, Y+7	; 0x07
    37fc:	ee 80       	ldd	r14, Y+6	; 0x06
    37fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3800:	0c 81       	ldd	r16, Y+4	; 0x04
    3802:	1b 81       	ldd	r17, Y+3	; 0x03
    3804:	aa 81       	ldd	r26, Y+2	; 0x02
    3806:	b9 81       	ldd	r27, Y+1	; 0x01
    3808:	ce 0f       	add	r28, r30
    380a:	d1 1d       	adc	r29, r1
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	ed 01       	movw	r28, r26
    3818:	08 95       	ret

0000381a <itoa>:
    381a:	fb 01       	movw	r30, r22
    381c:	9f 01       	movw	r18, r30
    381e:	e8 94       	clt
    3820:	42 30       	cpi	r20, 0x02	; 2
    3822:	c4 f0       	brlt	.+48     	; 0x3854 <itoa+0x3a>
    3824:	45 32       	cpi	r20, 0x25	; 37
    3826:	b4 f4       	brge	.+44     	; 0x3854 <itoa+0x3a>
    3828:	4a 30       	cpi	r20, 0x0A	; 10
    382a:	29 f4       	brne	.+10     	; 0x3836 <itoa+0x1c>
    382c:	97 fb       	bst	r25, 7
    382e:	1e f4       	brtc	.+6      	; 0x3836 <itoa+0x1c>
    3830:	90 95       	com	r25
    3832:	81 95       	neg	r24
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	64 2f       	mov	r22, r20
    3838:	77 27       	eor	r23, r23
    383a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    383e:	80 5d       	subi	r24, 0xD0	; 208
    3840:	8a 33       	cpi	r24, 0x3A	; 58
    3842:	0c f0       	brlt	.+2      	; 0x3846 <itoa+0x2c>
    3844:	89 5d       	subi	r24, 0xD9	; 217
    3846:	81 93       	st	Z+, r24
    3848:	cb 01       	movw	r24, r22
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	a1 f7       	brne	.-24     	; 0x3836 <itoa+0x1c>
    384e:	16 f4       	brtc	.+4      	; 0x3854 <itoa+0x3a>
    3850:	5d e2       	ldi	r21, 0x2D	; 45
    3852:	51 93       	st	Z+, r21
    3854:	10 82       	st	Z, r1
    3856:	c9 01       	movw	r24, r18
    3858:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <strrev>

0000385c <strrev>:
    385c:	dc 01       	movw	r26, r24
    385e:	fc 01       	movw	r30, r24
    3860:	67 2f       	mov	r22, r23
    3862:	71 91       	ld	r23, Z+
    3864:	77 23       	and	r23, r23
    3866:	e1 f7       	brne	.-8      	; 0x3860 <strrev+0x4>
    3868:	32 97       	sbiw	r30, 0x02	; 2
    386a:	04 c0       	rjmp	.+8      	; 0x3874 <strrev+0x18>
    386c:	7c 91       	ld	r23, X
    386e:	6d 93       	st	X+, r22
    3870:	70 83       	st	Z, r23
    3872:	62 91       	ld	r22, -Z
    3874:	ae 17       	cp	r26, r30
    3876:	bf 07       	cpc	r27, r31
    3878:	c8 f3       	brcs	.-14     	; 0x386c <strrev+0x10>
    387a:	08 95       	ret

0000387c <__udivmodhi4>:
    387c:	aa 1b       	sub	r26, r26
    387e:	bb 1b       	sub	r27, r27
    3880:	51 e1       	ldi	r21, 0x11	; 17
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <__udivmodhi4_ep>

00003884 <__udivmodhi4_loop>:
    3884:	aa 1f       	adc	r26, r26
    3886:	bb 1f       	adc	r27, r27
    3888:	a6 17       	cp	r26, r22
    388a:	b7 07       	cpc	r27, r23
    388c:	10 f0       	brcs	.+4      	; 0x3892 <__udivmodhi4_ep>
    388e:	a6 1b       	sub	r26, r22
    3890:	b7 0b       	sbc	r27, r23

00003892 <__udivmodhi4_ep>:
    3892:	88 1f       	adc	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	5a 95       	dec	r21
    3898:	a9 f7       	brne	.-22     	; 0x3884 <__udivmodhi4_loop>
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	bc 01       	movw	r22, r24
    38a0:	cd 01       	movw	r24, r26
    38a2:	08 95       	ret

000038a4 <_exit>:
    38a4:	f8 94       	cli

000038a6 <__stop_program>:
    38a6:	ff cf       	rjmp	.-2      	; 0x38a6 <__stop_program>
